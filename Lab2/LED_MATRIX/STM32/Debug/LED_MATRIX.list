
LED_MATRIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000270c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002440  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c58  08004c58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c58  08004c58  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c58  08004c58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  08004c6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004c6c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e7e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001622  00000000  00000000  00027ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  00029518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000758  00000000  00000000  00029e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ca5  00000000  00000000  0002a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009c6d  00000000  00000000  00041295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085706  00000000  00000000  0004af02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002778  00000000  00000000  000d0608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d2d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002800 	.word	0x08002800

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002800 	.word	0x08002800

0800014c <setTimer0>:
const int MATRIX_CYCLE = 100; // divisible by TIMER_CYCLE
const int SHIFT_CYCLE = 1600; // divisible by MATRIX_CYCLE * MAX_LED_MATRIX

int timer0_counter = 0;
int timer0_flag = 0;
void setTimer0(int duration) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 8000154:	220a      	movs	r2, #10
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	fb93 f3f2 	sdiv	r3, r3, r2
 800015c:	4a04      	ldr	r2, [pc, #16]	; (8000170 <setTimer0+0x24>)
 800015e:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <setTimer0+0x28>)
 8000162:	2200      	movs	r2, #0
 8000164:	601a      	str	r2, [r3, #0]
}
 8000166:	bf00      	nop
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	20000070 	.word	0x20000070
 8000174:	20000074 	.word	0x20000074

08000178 <runTimer0>:
void runTimer0() {
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <runTimer0+0x2c>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2b00      	cmp	r3, #0
 8000182:	dd0b      	ble.n	800019c <runTimer0+0x24>
		timer0_counter --;
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <runTimer0+0x2c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	3b01      	subs	r3, #1
 800018a:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <runTimer0+0x2c>)
 800018c:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <runTimer0+0x2c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	2b00      	cmp	r3, #0
 8000194:	d102      	bne.n	800019c <runTimer0+0x24>
 8000196:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <runTimer0+0x30>)
 8000198:	2201      	movs	r2, #1
 800019a:	601a      	str	r2, [r3, #0]
	}
}
 800019c:	bf00      	nop
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	20000070 	.word	0x20000070
 80001a8:	20000074 	.word	0x20000074

080001ac <setTimer1>:
int timer1_counter = 0;
int timer1_flag = 0;
void setTimer1(int duration) {
 80001ac:	b480      	push	{r7}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80001b4:	220a      	movs	r2, #10
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80001bc:	4a04      	ldr	r2, [pc, #16]	; (80001d0 <setTimer1+0x24>)
 80001be:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <setTimer1+0x28>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
}
 80001c6:	bf00      	nop
 80001c8:	370c      	adds	r7, #12
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	20000078 	.word	0x20000078
 80001d4:	2000007c 	.word	0x2000007c

080001d8 <runTimer1>:
void runTimer1() {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 80001dc:	4b09      	ldr	r3, [pc, #36]	; (8000204 <runTimer1+0x2c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	dd0b      	ble.n	80001fc <runTimer1+0x24>
		timer1_counter --;
 80001e4:	4b07      	ldr	r3, [pc, #28]	; (8000204 <runTimer1+0x2c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	3b01      	subs	r3, #1
 80001ea:	4a06      	ldr	r2, [pc, #24]	; (8000204 <runTimer1+0x2c>)
 80001ec:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 80001ee:	4b05      	ldr	r3, [pc, #20]	; (8000204 <runTimer1+0x2c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d102      	bne.n	80001fc <runTimer1+0x24>
 80001f6:	4b04      	ldr	r3, [pc, #16]	; (8000208 <runTimer1+0x30>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	601a      	str	r2, [r3, #0]
	}
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000078 	.word	0x20000078
 8000208:	2000007c 	.word	0x2000007c

0800020c <updateLEDMatrix>:
int index_led_matrix = 0;
void updateLEDMatrix(int index) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	switch (index) {
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2b07      	cmp	r3, #7
 8000218:	f200 815c 	bhi.w	80004d4 <updateLEDMatrix+0x2c8>
 800021c:	a201      	add	r2, pc, #4	; (adr r2, 8000224 <updateLEDMatrix+0x18>)
 800021e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000222:	bf00      	nop
 8000224:	08000245 	.word	0x08000245
 8000228:	08000297 	.word	0x08000297
 800022c:	080002e9 	.word	0x080002e9
 8000230:	0800033b 	.word	0x0800033b
 8000234:	0800038d 	.word	0x0800038d
 8000238:	080003df 	.word	0x080003df
 800023c:	08000431 	.word	0x08000431
 8000240:	08000483 	.word	0x08000483
	case 0:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000244:	2201      	movs	r2, #1
 8000246:	2101      	movs	r1, #1
 8000248:	48b9      	ldr	r0, [pc, #740]	; (8000530 <updateLEDMatrix+0x324>)
 800024a:	f001 fabb 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2102      	movs	r1, #2
 8000252:	48b7      	ldr	r0, [pc, #732]	; (8000530 <updateLEDMatrix+0x324>)
 8000254:	f001 fab6 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2104      	movs	r1, #4
 800025c:	48b4      	ldr	r0, [pc, #720]	; (8000530 <updateLEDMatrix+0x324>)
 800025e:	f001 fab1 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2108      	movs	r1, #8
 8000266:	48b2      	ldr	r0, [pc, #712]	; (8000530 <updateLEDMatrix+0x324>)
 8000268:	f001 faac 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2110      	movs	r1, #16
 8000270:	48af      	ldr	r0, [pc, #700]	; (8000530 <updateLEDMatrix+0x324>)
 8000272:	f001 faa7 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2120      	movs	r1, #32
 800027a:	48ad      	ldr	r0, [pc, #692]	; (8000530 <updateLEDMatrix+0x324>)
 800027c:	f001 faa2 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	48aa      	ldr	r0, [pc, #680]	; (8000530 <updateLEDMatrix+0x324>)
 8000286:	f001 fa9d 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2180      	movs	r1, #128	; 0x80
 800028e:	48a8      	ldr	r0, [pc, #672]	; (8000530 <updateLEDMatrix+0x324>)
 8000290:	f001 fa98 	bl	80017c4 <HAL_GPIO_WritePin>
		break;
 8000294:	e147      	b.n	8000526 <updateLEDMatrix+0x31a>
	case 1:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2101      	movs	r1, #1
 800029a:	48a5      	ldr	r0, [pc, #660]	; (8000530 <updateLEDMatrix+0x324>)
 800029c:	f001 fa92 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2102      	movs	r1, #2
 80002a4:	48a2      	ldr	r0, [pc, #648]	; (8000530 <updateLEDMatrix+0x324>)
 80002a6:	f001 fa8d 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2104      	movs	r1, #4
 80002ae:	48a0      	ldr	r0, [pc, #640]	; (8000530 <updateLEDMatrix+0x324>)
 80002b0:	f001 fa88 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2108      	movs	r1, #8
 80002b8:	489d      	ldr	r0, [pc, #628]	; (8000530 <updateLEDMatrix+0x324>)
 80002ba:	f001 fa83 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	2110      	movs	r1, #16
 80002c2:	489b      	ldr	r0, [pc, #620]	; (8000530 <updateLEDMatrix+0x324>)
 80002c4:	f001 fa7e 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2120      	movs	r1, #32
 80002cc:	4898      	ldr	r0, [pc, #608]	; (8000530 <updateLEDMatrix+0x324>)
 80002ce:	f001 fa79 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2140      	movs	r1, #64	; 0x40
 80002d6:	4896      	ldr	r0, [pc, #600]	; (8000530 <updateLEDMatrix+0x324>)
 80002d8:	f001 fa74 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 80002dc:	2200      	movs	r2, #0
 80002de:	2180      	movs	r1, #128	; 0x80
 80002e0:	4893      	ldr	r0, [pc, #588]	; (8000530 <updateLEDMatrix+0x324>)
 80002e2:	f001 fa6f 	bl	80017c4 <HAL_GPIO_WritePin>
		break;
 80002e6:	e11e      	b.n	8000526 <updateLEDMatrix+0x31a>
	case 2:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2101      	movs	r1, #1
 80002ec:	4890      	ldr	r0, [pc, #576]	; (8000530 <updateLEDMatrix+0x324>)
 80002ee:	f001 fa69 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2102      	movs	r1, #2
 80002f6:	488e      	ldr	r0, [pc, #568]	; (8000530 <updateLEDMatrix+0x324>)
 80002f8:	f001 fa64 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2104      	movs	r1, #4
 8000300:	488b      	ldr	r0, [pc, #556]	; (8000530 <updateLEDMatrix+0x324>)
 8000302:	f001 fa5f 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	2108      	movs	r1, #8
 800030a:	4889      	ldr	r0, [pc, #548]	; (8000530 <updateLEDMatrix+0x324>)
 800030c:	f001 fa5a 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2110      	movs	r1, #16
 8000314:	4886      	ldr	r0, [pc, #536]	; (8000530 <updateLEDMatrix+0x324>)
 8000316:	f001 fa55 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	4884      	ldr	r0, [pc, #528]	; (8000530 <updateLEDMatrix+0x324>)
 8000320:	f001 fa50 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2140      	movs	r1, #64	; 0x40
 8000328:	4881      	ldr	r0, [pc, #516]	; (8000530 <updateLEDMatrix+0x324>)
 800032a:	f001 fa4b 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2180      	movs	r1, #128	; 0x80
 8000332:	487f      	ldr	r0, [pc, #508]	; (8000530 <updateLEDMatrix+0x324>)
 8000334:	f001 fa46 	bl	80017c4 <HAL_GPIO_WritePin>
		break;
 8000338:	e0f5      	b.n	8000526 <updateLEDMatrix+0x31a>
	case 3:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2101      	movs	r1, #1
 800033e:	487c      	ldr	r0, [pc, #496]	; (8000530 <updateLEDMatrix+0x324>)
 8000340:	f001 fa40 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2102      	movs	r1, #2
 8000348:	4879      	ldr	r0, [pc, #484]	; (8000530 <updateLEDMatrix+0x324>)
 800034a:	f001 fa3b 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	2104      	movs	r1, #4
 8000352:	4877      	ldr	r0, [pc, #476]	; (8000530 <updateLEDMatrix+0x324>)
 8000354:	f001 fa36 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2108      	movs	r1, #8
 800035c:	4874      	ldr	r0, [pc, #464]	; (8000530 <updateLEDMatrix+0x324>)
 800035e:	f001 fa31 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2110      	movs	r1, #16
 8000366:	4872      	ldr	r0, [pc, #456]	; (8000530 <updateLEDMatrix+0x324>)
 8000368:	f001 fa2c 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2120      	movs	r1, #32
 8000370:	486f      	ldr	r0, [pc, #444]	; (8000530 <updateLEDMatrix+0x324>)
 8000372:	f001 fa27 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2140      	movs	r1, #64	; 0x40
 800037a:	486d      	ldr	r0, [pc, #436]	; (8000530 <updateLEDMatrix+0x324>)
 800037c:	f001 fa22 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	486a      	ldr	r0, [pc, #424]	; (8000530 <updateLEDMatrix+0x324>)
 8000386:	f001 fa1d 	bl	80017c4 <HAL_GPIO_WritePin>
		break;
 800038a:	e0cc      	b.n	8000526 <updateLEDMatrix+0x31a>
	case 4:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2101      	movs	r1, #1
 8000390:	4867      	ldr	r0, [pc, #412]	; (8000530 <updateLEDMatrix+0x324>)
 8000392:	f001 fa17 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2102      	movs	r1, #2
 800039a:	4865      	ldr	r0, [pc, #404]	; (8000530 <updateLEDMatrix+0x324>)
 800039c:	f001 fa12 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2104      	movs	r1, #4
 80003a4:	4862      	ldr	r0, [pc, #392]	; (8000530 <updateLEDMatrix+0x324>)
 80003a6:	f001 fa0d 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	2108      	movs	r1, #8
 80003ae:	4860      	ldr	r0, [pc, #384]	; (8000530 <updateLEDMatrix+0x324>)
 80003b0:	f001 fa08 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	2110      	movs	r1, #16
 80003b8:	485d      	ldr	r0, [pc, #372]	; (8000530 <updateLEDMatrix+0x324>)
 80003ba:	f001 fa03 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	2120      	movs	r1, #32
 80003c2:	485b      	ldr	r0, [pc, #364]	; (8000530 <updateLEDMatrix+0x324>)
 80003c4:	f001 f9fe 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2140      	movs	r1, #64	; 0x40
 80003cc:	4858      	ldr	r0, [pc, #352]	; (8000530 <updateLEDMatrix+0x324>)
 80003ce:	f001 f9f9 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	4856      	ldr	r0, [pc, #344]	; (8000530 <updateLEDMatrix+0x324>)
 80003d8:	f001 f9f4 	bl	80017c4 <HAL_GPIO_WritePin>
		break;
 80003dc:	e0a3      	b.n	8000526 <updateLEDMatrix+0x31a>
	case 5:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	2101      	movs	r1, #1
 80003e2:	4853      	ldr	r0, [pc, #332]	; (8000530 <updateLEDMatrix+0x324>)
 80003e4:	f001 f9ee 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2102      	movs	r1, #2
 80003ec:	4850      	ldr	r0, [pc, #320]	; (8000530 <updateLEDMatrix+0x324>)
 80003ee:	f001 f9e9 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2104      	movs	r1, #4
 80003f6:	484e      	ldr	r0, [pc, #312]	; (8000530 <updateLEDMatrix+0x324>)
 80003f8:	f001 f9e4 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2108      	movs	r1, #8
 8000400:	484b      	ldr	r0, [pc, #300]	; (8000530 <updateLEDMatrix+0x324>)
 8000402:	f001 f9df 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2110      	movs	r1, #16
 800040a:	4849      	ldr	r0, [pc, #292]	; (8000530 <updateLEDMatrix+0x324>)
 800040c:	f001 f9da 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2120      	movs	r1, #32
 8000414:	4846      	ldr	r0, [pc, #280]	; (8000530 <updateLEDMatrix+0x324>)
 8000416:	f001 f9d5 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2140      	movs	r1, #64	; 0x40
 800041e:	4844      	ldr	r0, [pc, #272]	; (8000530 <updateLEDMatrix+0x324>)
 8000420:	f001 f9d0 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2180      	movs	r1, #128	; 0x80
 8000428:	4841      	ldr	r0, [pc, #260]	; (8000530 <updateLEDMatrix+0x324>)
 800042a:	f001 f9cb 	bl	80017c4 <HAL_GPIO_WritePin>
		break;
 800042e:	e07a      	b.n	8000526 <updateLEDMatrix+0x31a>
	case 6:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2101      	movs	r1, #1
 8000434:	483e      	ldr	r0, [pc, #248]	; (8000530 <updateLEDMatrix+0x324>)
 8000436:	f001 f9c5 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2102      	movs	r1, #2
 800043e:	483c      	ldr	r0, [pc, #240]	; (8000530 <updateLEDMatrix+0x324>)
 8000440:	f001 f9c0 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2104      	movs	r1, #4
 8000448:	4839      	ldr	r0, [pc, #228]	; (8000530 <updateLEDMatrix+0x324>)
 800044a:	f001 f9bb 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2108      	movs	r1, #8
 8000452:	4837      	ldr	r0, [pc, #220]	; (8000530 <updateLEDMatrix+0x324>)
 8000454:	f001 f9b6 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2110      	movs	r1, #16
 800045c:	4834      	ldr	r0, [pc, #208]	; (8000530 <updateLEDMatrix+0x324>)
 800045e:	f001 f9b1 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2120      	movs	r1, #32
 8000466:	4832      	ldr	r0, [pc, #200]	; (8000530 <updateLEDMatrix+0x324>)
 8000468:	f001 f9ac 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	482f      	ldr	r0, [pc, #188]	; (8000530 <updateLEDMatrix+0x324>)
 8000472:	f001 f9a7 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	482d      	ldr	r0, [pc, #180]	; (8000530 <updateLEDMatrix+0x324>)
 800047c:	f001 f9a2 	bl	80017c4 <HAL_GPIO_WritePin>
		break;
 8000480:	e051      	b.n	8000526 <updateLEDMatrix+0x31a>
	case 7:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2101      	movs	r1, #1
 8000486:	482a      	ldr	r0, [pc, #168]	; (8000530 <updateLEDMatrix+0x324>)
 8000488:	f001 f99c 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2102      	movs	r1, #2
 8000490:	4827      	ldr	r0, [pc, #156]	; (8000530 <updateLEDMatrix+0x324>)
 8000492:	f001 f997 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2104      	movs	r1, #4
 800049a:	4825      	ldr	r0, [pc, #148]	; (8000530 <updateLEDMatrix+0x324>)
 800049c:	f001 f992 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2108      	movs	r1, #8
 80004a4:	4822      	ldr	r0, [pc, #136]	; (8000530 <updateLEDMatrix+0x324>)
 80004a6:	f001 f98d 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2110      	movs	r1, #16
 80004ae:	4820      	ldr	r0, [pc, #128]	; (8000530 <updateLEDMatrix+0x324>)
 80004b0:	f001 f988 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2120      	movs	r1, #32
 80004b8:	481d      	ldr	r0, [pc, #116]	; (8000530 <updateLEDMatrix+0x324>)
 80004ba:	f001 f983 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	2140      	movs	r1, #64	; 0x40
 80004c2:	481b      	ldr	r0, [pc, #108]	; (8000530 <updateLEDMatrix+0x324>)
 80004c4:	f001 f97e 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	4818      	ldr	r0, [pc, #96]	; (8000530 <updateLEDMatrix+0x324>)
 80004ce:	f001 f979 	bl	80017c4 <HAL_GPIO_WritePin>
		break;
 80004d2:	e028      	b.n	8000526 <updateLEDMatrix+0x31a>
	default:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2101      	movs	r1, #1
 80004d8:	4815      	ldr	r0, [pc, #84]	; (8000530 <updateLEDMatrix+0x324>)
 80004da:	f001 f973 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2102      	movs	r1, #2
 80004e2:	4813      	ldr	r0, [pc, #76]	; (8000530 <updateLEDMatrix+0x324>)
 80004e4:	f001 f96e 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2104      	movs	r1, #4
 80004ec:	4810      	ldr	r0, [pc, #64]	; (8000530 <updateLEDMatrix+0x324>)
 80004ee:	f001 f969 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2108      	movs	r1, #8
 80004f6:	480e      	ldr	r0, [pc, #56]	; (8000530 <updateLEDMatrix+0x324>)
 80004f8:	f001 f964 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2110      	movs	r1, #16
 8000500:	480b      	ldr	r0, [pc, #44]	; (8000530 <updateLEDMatrix+0x324>)
 8000502:	f001 f95f 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <updateLEDMatrix+0x324>)
 800050c:	f001 f95a 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	4806      	ldr	r0, [pc, #24]	; (8000530 <updateLEDMatrix+0x324>)
 8000516:	f001 f955 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	4804      	ldr	r0, [pc, #16]	; (8000530 <updateLEDMatrix+0x324>)
 8000520:	f001 f950 	bl	80017c4 <HAL_GPIO_WritePin>
		break;
 8000524:	bf00      	nop
	}
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40010c00 	.word	0x40010c00

08000534 <displayLEDMatrix>:
int matrix_buffer[8][8] = {{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0}};
void displayLEDMatrix(int index) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	if ((matrix_buffer[0][index]) == 1)
 800053c:	4a52      	ldr	r2, [pc, #328]	; (8000688 <displayLEDMatrix+0x154>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d106      	bne.n	8000556 <displayLEDMatrix+0x22>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054e:	484f      	ldr	r0, [pc, #316]	; (800068c <displayLEDMatrix+0x158>)
 8000550:	f001 f938 	bl	80017c4 <HAL_GPIO_WritePin>
 8000554:	e005      	b.n	8000562 <displayLEDMatrix+0x2e>
	else HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055c:	484b      	ldr	r0, [pc, #300]	; (800068c <displayLEDMatrix+0x158>)
 800055e:	f001 f931 	bl	80017c4 <HAL_GPIO_WritePin>
	if ((matrix_buffer[1][index]) == 1)
 8000562:	4a49      	ldr	r2, [pc, #292]	; (8000688 <displayLEDMatrix+0x154>)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3308      	adds	r3, #8
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d106      	bne.n	800057e <displayLEDMatrix+0x4a>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	4845      	ldr	r0, [pc, #276]	; (800068c <displayLEDMatrix+0x158>)
 8000578:	f001 f924 	bl	80017c4 <HAL_GPIO_WritePin>
 800057c:	e005      	b.n	800058a <displayLEDMatrix+0x56>
	else HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000584:	4841      	ldr	r0, [pc, #260]	; (800068c <displayLEDMatrix+0x158>)
 8000586:	f001 f91d 	bl	80017c4 <HAL_GPIO_WritePin>
	if ((matrix_buffer[2][index]) == 1)
 800058a:	4a3f      	ldr	r2, [pc, #252]	; (8000688 <displayLEDMatrix+0x154>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3310      	adds	r3, #16
 8000590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d106      	bne.n	80005a6 <displayLEDMatrix+0x72>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059e:	483b      	ldr	r0, [pc, #236]	; (800068c <displayLEDMatrix+0x158>)
 80005a0:	f001 f910 	bl	80017c4 <HAL_GPIO_WritePin>
 80005a4:	e005      	b.n	80005b2 <displayLEDMatrix+0x7e>
	else HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ac:	4837      	ldr	r0, [pc, #220]	; (800068c <displayLEDMatrix+0x158>)
 80005ae:	f001 f909 	bl	80017c4 <HAL_GPIO_WritePin>
	if ((matrix_buffer[3][index]) == 1)
 80005b2:	4a35      	ldr	r2, [pc, #212]	; (8000688 <displayLEDMatrix+0x154>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3318      	adds	r3, #24
 80005b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d106      	bne.n	80005ce <displayLEDMatrix+0x9a>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c6:	4831      	ldr	r0, [pc, #196]	; (800068c <displayLEDMatrix+0x158>)
 80005c8:	f001 f8fc 	bl	80017c4 <HAL_GPIO_WritePin>
 80005cc:	e005      	b.n	80005da <displayLEDMatrix+0xa6>
	else HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d4:	482d      	ldr	r0, [pc, #180]	; (800068c <displayLEDMatrix+0x158>)
 80005d6:	f001 f8f5 	bl	80017c4 <HAL_GPIO_WritePin>
	if ((matrix_buffer[4][index]) == 1)
 80005da:	4a2b      	ldr	r2, [pc, #172]	; (8000688 <displayLEDMatrix+0x154>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3320      	adds	r3, #32
 80005e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d106      	bne.n	80005f6 <displayLEDMatrix+0xc2>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ee:	4827      	ldr	r0, [pc, #156]	; (800068c <displayLEDMatrix+0x158>)
 80005f0:	f001 f8e8 	bl	80017c4 <HAL_GPIO_WritePin>
 80005f4:	e005      	b.n	8000602 <displayLEDMatrix+0xce>
	else HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fc:	4823      	ldr	r0, [pc, #140]	; (800068c <displayLEDMatrix+0x158>)
 80005fe:	f001 f8e1 	bl	80017c4 <HAL_GPIO_WritePin>
	if ((matrix_buffer[5][index]) == 1)
 8000602:	4a21      	ldr	r2, [pc, #132]	; (8000688 <displayLEDMatrix+0x154>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3328      	adds	r3, #40	; 0x28
 8000608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d106      	bne.n	800061e <displayLEDMatrix+0xea>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000616:	481d      	ldr	r0, [pc, #116]	; (800068c <displayLEDMatrix+0x158>)
 8000618:	f001 f8d4 	bl	80017c4 <HAL_GPIO_WritePin>
 800061c:	e005      	b.n	800062a <displayLEDMatrix+0xf6>
	else HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000624:	4819      	ldr	r0, [pc, #100]	; (800068c <displayLEDMatrix+0x158>)
 8000626:	f001 f8cd 	bl	80017c4 <HAL_GPIO_WritePin>
	if ((matrix_buffer[6][index]) == 1)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <displayLEDMatrix+0x154>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3330      	adds	r3, #48	; 0x30
 8000630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d106      	bne.n	8000646 <displayLEDMatrix+0x112>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4813      	ldr	r0, [pc, #76]	; (800068c <displayLEDMatrix+0x158>)
 8000640:	f001 f8c0 	bl	80017c4 <HAL_GPIO_WritePin>
 8000644:	e005      	b.n	8000652 <displayLEDMatrix+0x11e>
	else HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800064c:	480f      	ldr	r0, [pc, #60]	; (800068c <displayLEDMatrix+0x158>)
 800064e:	f001 f8b9 	bl	80017c4 <HAL_GPIO_WritePin>
	if ((matrix_buffer[7][index]) == 1)
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <displayLEDMatrix+0x154>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3338      	adds	r3, #56	; 0x38
 8000658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d106      	bne.n	800066e <displayLEDMatrix+0x13a>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000666:	4809      	ldr	r0, [pc, #36]	; (800068c <displayLEDMatrix+0x158>)
 8000668:	f001 f8ac 	bl	80017c4 <HAL_GPIO_WritePin>
 800066c:	e005      	b.n	800067a <displayLEDMatrix+0x146>
	else HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <displayLEDMatrix+0x158>)
 8000676:	f001 f8a5 	bl	80017c4 <HAL_GPIO_WritePin>
	updateLEDMatrix(index);
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff fdc6 	bl	800020c <updateLEDMatrix>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000084 	.word	0x20000084
 800068c:	40010c00 	.word	0x40010c00

08000690 <setMatrixBuffer>:
void setMatrixBuffer(int arr[8][8]) {
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i ++) {
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	e019      	b.n	80006d2 <setMatrixBuffer+0x42>
		for (int j = 0; j < 8; j ++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	e010      	b.n	80006c6 <setMatrixBuffer+0x36>
			matrix_buffer[i][j] = arr[i][j];
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	015b      	lsls	r3, r3, #5
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <setMatrixBuffer+0x54>)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	00d9      	lsls	r1, r3, #3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	440b      	add	r3, r1
 80006bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (int j = 0; j < 8; j ++) {
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	2b07      	cmp	r3, #7
 80006ca:	ddeb      	ble.n	80006a4 <setMatrixBuffer+0x14>
	for (int i = 0; i < 8; i ++) {
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	dde2      	ble.n	800069e <setMatrixBuffer+0xe>
		}
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000084 	.word	0x20000084

080006e8 <setCharacter>:
void setCharacter(char chr) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0c2      	sub	sp, #264	; 0x108
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4602      	mov	r2, r0
 80006f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80006f4:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80006f8:	701a      	strb	r2, [r3, #0]
	switch (chr) {
 80006fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80006fe:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	3b30      	subs	r3, #48	; 0x30
 8000706:	2b2a      	cmp	r3, #42	; 0x2a
 8000708:	f200 8314 	bhi.w	8000d34 <setCharacter+0x64c>
 800070c:	a201      	add	r2, pc, #4	; (adr r2, 8000714 <setCharacter+0x2c>)
 800070e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000712:	bf00      	nop
 8000714:	080007c1 	.word	0x080007c1
 8000718:	080007e5 	.word	0x080007e5
 800071c:	08000809 	.word	0x08000809
 8000720:	0800082d 	.word	0x0800082d
 8000724:	08000851 	.word	0x08000851
 8000728:	08000875 	.word	0x08000875
 800072c:	08000899 	.word	0x08000899
 8000730:	080008bd 	.word	0x080008bd
 8000734:	080008e1 	.word	0x080008e1
 8000738:	08000905 	.word	0x08000905
 800073c:	08000d35 	.word	0x08000d35
 8000740:	08000d35 	.word	0x08000d35
 8000744:	08000d35 	.word	0x08000d35
 8000748:	08000d35 	.word	0x08000d35
 800074c:	08000d35 	.word	0x08000d35
 8000750:	08000d35 	.word	0x08000d35
 8000754:	08000d35 	.word	0x08000d35
 8000758:	08000929 	.word	0x08000929
 800075c:	0800094d 	.word	0x0800094d
 8000760:	08000971 	.word	0x08000971
 8000764:	08000995 	.word	0x08000995
 8000768:	080009b9 	.word	0x080009b9
 800076c:	080009dd 	.word	0x080009dd
 8000770:	08000a01 	.word	0x08000a01
 8000774:	08000a25 	.word	0x08000a25
 8000778:	08000a49 	.word	0x08000a49
 800077c:	08000a6d 	.word	0x08000a6d
 8000780:	08000a91 	.word	0x08000a91
 8000784:	08000ab5 	.word	0x08000ab5
 8000788:	08000ad9 	.word	0x08000ad9
 800078c:	08000afd 	.word	0x08000afd
 8000790:	08000b21 	.word	0x08000b21
 8000794:	08000ba9 	.word	0x08000ba9
 8000798:	08000bcd 	.word	0x08000bcd
 800079c:	08000bf1 	.word	0x08000bf1
 80007a0:	08000c15 	.word	0x08000c15
 80007a4:	08000c39 	.word	0x08000c39
 80007a8:	08000c5d 	.word	0x08000c5d
 80007ac:	08000c81 	.word	0x08000c81
 80007b0:	08000ca5 	.word	0x08000ca5
 80007b4:	08000cc9 	.word	0x08000cc9
 80007b8:	08000ced 	.word	0x08000ced
 80007bc:	08000d11 	.word	0x08000d11
	case '0': {
		int character0[8][8] = {{0,0,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
 80007c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80007c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80007c8:	4ade      	ldr	r2, [pc, #888]	; (8000b44 <setCharacter+0x45c>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	4611      	mov	r1, r2
 80007ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d2:	461a      	mov	r2, r3
 80007d4:	f002 f806 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,1,1,1,0},{0,1,1,1,0,1,1,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(character0);
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff57 	bl	8000690 <setMatrixBuffer>
		break;
 80007e2:	e2a8      	b.n	8000d36 <setCharacter+0x64e>
	}
	case '1': {
		int character1[8][8] = {{0,0,0,1,1,0,0,0},{0,0,1,1,1,0,0,0},
 80007e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80007e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80007ec:	4ad6      	ldr	r2, [pc, #856]	; (8000b48 <setCharacter+0x460>)
 80007ee:	4618      	mov	r0, r3
 80007f0:	4611      	mov	r1, r2
 80007f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f6:	461a      	mov	r2, r3
 80007f8:	f001 fff4 	bl	80027e4 <memcpy>
				{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0},
				{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(character1);
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff45 	bl	8000690 <setMatrixBuffer>
		break;
 8000806:	e296      	b.n	8000d36 <setCharacter+0x64e>
	}
	case '2': {
		int character2[8][8] = {{0,0,1,1,1,1,0,0},{0,1,0,0,0,1,1,0},
 8000808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800080c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000810:	4ace      	ldr	r2, [pc, #824]	; (8000b4c <setCharacter+0x464>)
 8000812:	4618      	mov	r0, r3
 8000814:	4611      	mov	r1, r2
 8000816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081a:	461a      	mov	r2, r3
 800081c:	f001 ffe2 	bl	80027e4 <memcpy>
				{0,0,0,0,0,1,1,0},{0,0,0,0,0,1,1,0},{0,0,0,0,1,1,0,0},
				{0,0,0,1,1,0,0,0},{0,0,1,1,0,0,0,0},{0,1,1,1,1,1,1,0}};
		setMatrixBuffer(character2);
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff33 	bl	8000690 <setMatrixBuffer>
		break;
 800082a:	e284      	b.n	8000d36 <setCharacter+0x64e>
	}
	case '3': {
		int character3[8][8] = {{0,0,1,1,1,1,0,0},{0,1,0,0,0,1,1,0},
 800082c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000830:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000834:	4ac6      	ldr	r2, [pc, #792]	; (8000b50 <setCharacter+0x468>)
 8000836:	4618      	mov	r0, r3
 8000838:	4611      	mov	r1, r2
 800083a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083e:	461a      	mov	r2, r3
 8000840:	f001 ffd0 	bl	80027e4 <memcpy>
				{0,0,0,0,0,1,1,0},{0,0,0,1,1,1,0,0},{0,0,0,0,0,1,1,0},
				{0,0,0,0,0,1,1,0},{0,1,0,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(character3);
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff21 	bl	8000690 <setMatrixBuffer>
		break;
 800084e:	e272      	b.n	8000d36 <setCharacter+0x64e>
	}
	case '4': {
		int character4[8][8] = {{0,0,0,0,1,1,0,0},{0,0,0,1,1,1,0,0},
 8000850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000854:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000858:	4abe      	ldr	r2, [pc, #760]	; (8000b54 <setCharacter+0x46c>)
 800085a:	4618      	mov	r0, r3
 800085c:	4611      	mov	r1, r2
 800085e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000862:	461a      	mov	r2, r3
 8000864:	f001 ffbe 	bl	80027e4 <memcpy>
				{0,0,1,0,1,1,0,0},{0,0,1,0,1,1,0,0},{0,1,0,0,1,1,0,0},
				{0,1,1,1,1,1,1,0},{0,0,0,0,1,1,0,0},{0,0,0,1,1,1,1,0}};
		setMatrixBuffer(character4);
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff0f 	bl	8000690 <setMatrixBuffer>
		break;
 8000872:	e260      	b.n	8000d36 <setCharacter+0x64e>
	}
	case '5': {
		int character5[8][8] = {{0,1,1,1,1,1,1,0},{0,1,1,0,0,0,0,0},
 8000874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000878:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800087c:	4ab6      	ldr	r2, [pc, #728]	; (8000b58 <setCharacter+0x470>)
 800087e:	4618      	mov	r0, r3
 8000880:	4611      	mov	r1, r2
 8000882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000886:	461a      	mov	r2, r3
 8000888:	f001 ffac 	bl	80027e4 <memcpy>
				{0,1,1,1,1,1,0,0},{0,1,0,0,0,1,1,0},{0,0,0,0,0,1,1,0},
				{0,0,0,0,0,1,1,0},{0,1,0,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(character5);
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fefd 	bl	8000690 <setMatrixBuffer>
		break;
 8000896:	e24e      	b.n	8000d36 <setCharacter+0x64e>
	}
	case '6': {
		int character6[8][8] = {{0,0,1,1,1,1,0,0},{0,1,1,0,0,0,1,0},
 8000898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800089c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008a0:	4aae      	ldr	r2, [pc, #696]	; (8000b5c <setCharacter+0x474>)
 80008a2:	4618      	mov	r0, r3
 80008a4:	4611      	mov	r1, r2
 80008a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008aa:	461a      	mov	r2, r3
 80008ac:	f001 ff9a 	bl	80027e4 <memcpy>
				{0,1,1,0,0,0,0,0},{0,1,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(character6);
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff feeb 	bl	8000690 <setMatrixBuffer>
		break;
 80008ba:	e23c      	b.n	8000d36 <setCharacter+0x64e>
	}
	case '7': {
		int character7[8][8] = {{0,1,1,1,1,1,1,0},{0,1,0,0,0,1,1,0},
 80008bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80008c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008c4:	4aa6      	ldr	r2, [pc, #664]	; (8000b60 <setCharacter+0x478>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	4611      	mov	r1, r2
 80008ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ce:	461a      	mov	r2, r3
 80008d0:	f001 ff88 	bl	80027e4 <memcpy>
				{0,0,0,0,1,1,0,0},{0,0,0,0,1,1,0,0},{0,0,0,1,1,0,0,0},
				{0,0,0,1,1,0,0,0},{0,0,1,1,0,0,0,0},{0,0,1,1,0,0,0,0}};
		setMatrixBuffer(character7);
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fed9 	bl	8000690 <setMatrixBuffer>
		break;
 80008de:	e22a      	b.n	8000d36 <setCharacter+0x64e>
		}
	case '8': {
		int character8[8][8] = {{0,0,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
 80008e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80008e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008e8:	4a9e      	ldr	r2, [pc, #632]	; (8000b64 <setCharacter+0x47c>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	4611      	mov	r1, r2
 80008ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f2:	461a      	mov	r2, r3
 80008f4:	f001 ff76 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(character8);
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fec7 	bl	8000690 <setMatrixBuffer>
			break;
 8000902:	e218      	b.n	8000d36 <setCharacter+0x64e>
		}
	case '9': {
		int character9[8][8] = {{0,0,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
 8000904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000908:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800090c:	4a96      	ldr	r2, [pc, #600]	; (8000b68 <setCharacter+0x480>)
 800090e:	4618      	mov	r0, r3
 8000910:	4611      	mov	r1, r2
 8000912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000916:	461a      	mov	r2, r3
 8000918:	f001 ff64 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,1,0},
				{0,0,0,0,0,1,1,0},{0,1,0,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(character9);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff feb5 	bl	8000690 <setMatrixBuffer>
		break;
 8000926:	e206      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'A': {
		int characterA[8][8] = {{0,0,0,1,1,0,0,0},{0,0,1,0,0,1,0,0},
 8000928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800092c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000930:	4a8e      	ldr	r2, [pc, #568]	; (8000b6c <setCharacter+0x484>)
 8000932:	4618      	mov	r0, r3
 8000934:	4611      	mov	r1, r2
 8000936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093a:	461a      	mov	r2, r3
 800093c:	f001 ff52 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
				{0,1,1,1,1,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0}};
		setMatrixBuffer(characterA);
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fea3 	bl	8000690 <setMatrixBuffer>
		break;
 800094a:	e1f4      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'B': {
		int characterB[8][8] = {{0,1,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
 800094c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000950:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000954:	4a86      	ldr	r2, [pc, #536]	; (8000b70 <setCharacter+0x488>)
 8000956:	4618      	mov	r0, r3
 8000958:	4611      	mov	r1, r2
 800095a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095e:	461a      	mov	r2, r3
 8000960:	f001 ff40 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,1,1,1,0,0}};
		setMatrixBuffer(characterB);
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fe91 	bl	8000690 <setMatrixBuffer>
		break;
 800096e:	e1e2      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'C': {
		int characterC[8][8] = {{0,0,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
 8000970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000974:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000978:	4a7e      	ldr	r2, [pc, #504]	; (8000b74 <setCharacter+0x48c>)
 800097a:	4618      	mov	r0, r3
 800097c:	4611      	mov	r1, r2
 800097e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000982:	461a      	mov	r2, r3
 8000984:	f001 ff2e 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,0,0,0},{0,1,1,0,0,0,0,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(characterC);
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe7f 	bl	8000690 <setMatrixBuffer>
		break;
 8000992:	e1d0      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'D': {
		int characterD[8][8] = {{0,1,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
 8000994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000998:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800099c:	4a76      	ldr	r2, [pc, #472]	; (8000b78 <setCharacter+0x490>)
 800099e:	4618      	mov	r0, r3
 80009a0:	4611      	mov	r1, r2
 80009a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a6:	461a      	mov	r2, r3
 80009a8:	f001 ff1c 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,1,1,1,0,0}};
		setMatrixBuffer(characterD);
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe6d 	bl	8000690 <setMatrixBuffer>
		break;
 80009b6:	e1be      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'E': {
		int characterE[8][8] = {{0,1,1,1,1,1,1,0},{0,1,1,0,0,0,0,0},
 80009b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80009bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80009c0:	4a6e      	ldr	r2, [pc, #440]	; (8000b7c <setCharacter+0x494>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	4611      	mov	r1, r2
 80009c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ca:	461a      	mov	r2, r3
 80009cc:	f001 ff0a 	bl	80027e4 <memcpy>
				{0,1,1,0,0,0,0,0},{0,1,1,1,1,1,0,0},{0,1,1,0,0,0,0,0},
				{0,1,1,0,0,0,0,0},{0,1,1,0,0,0,0,0},{0,1,1,1,1,1,1,0}};
		setMatrixBuffer(characterE);
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe5b 	bl	8000690 <setMatrixBuffer>
		break;
 80009da:	e1ac      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'F': {
		int characterE[8][8] = {{0,1,1,1,1,1,1,0},{0,1,1,0,0,0,0,0},
 80009dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80009e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80009e4:	4a66      	ldr	r2, [pc, #408]	; (8000b80 <setCharacter+0x498>)
 80009e6:	4618      	mov	r0, r3
 80009e8:	4611      	mov	r1, r2
 80009ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ee:	461a      	mov	r2, r3
 80009f0:	f001 fef8 	bl	80027e4 <memcpy>
				{0,1,1,0,0,0,0,0},{0,1,1,1,1,1,0,0},{0,1,1,0,0,0,0,0},
				{0,1,1,0,0,0,0,0},{0,1,1,0,0,0,0,0},{0,1,1,0,0,0,0,0}};
		setMatrixBuffer(characterE);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fe49 	bl	8000690 <setMatrixBuffer>
		break;
 80009fe:	e19a      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'G': {
		int characterG[8][8] = {{0,0,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
 8000a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000a04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a08:	4a5e      	ldr	r2, [pc, #376]	; (8000b84 <setCharacter+0x49c>)
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a12:	461a      	mov	r2, r3
 8000a14:	f001 fee6 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,0,0,0},{0,1,1,0,1,1,1,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(characterG);
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe37 	bl	8000690 <setMatrixBuffer>
		break;
 8000a22:	e188      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'H': {
		int characterH[8][8] = {{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
 8000a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000a28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a2c:	4a56      	ldr	r2, [pc, #344]	; (8000b88 <setCharacter+0x4a0>)
 8000a2e:	4618      	mov	r0, r3
 8000a30:	4611      	mov	r1, r2
 8000a32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a36:	461a      	mov	r2, r3
 8000a38:	f001 fed4 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,1,1,1,1,0},{0,1,1,1,1,1,1,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0}};
		setMatrixBuffer(characterH);
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe25 	bl	8000690 <setMatrixBuffer>
		break;
 8000a46:	e176      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'I': {
		int characterI[8][8] = {{0,0,1,1,1,1,0,0},{0,0,0,1,1,0,0,0},
 8000a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000a4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a50:	4a4e      	ldr	r2, [pc, #312]	; (8000b8c <setCharacter+0x4a4>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	4611      	mov	r1, r2
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	f001 fec2 	bl	80027e4 <memcpy>
				{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0},
				{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(characterI);
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fe13 	bl	8000690 <setMatrixBuffer>
		break;
 8000a6a:	e164      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'J': {
		int characterJ[8][8] = {{0,0,0,0,0,1,1,0},{0,0,0,0,0,1,1,0},
 8000a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000a70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a74:	4a46      	ldr	r2, [pc, #280]	; (8000b90 <setCharacter+0x4a8>)
 8000a76:	4618      	mov	r0, r3
 8000a78:	4611      	mov	r1, r2
 8000a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f001 feb0 	bl	80027e4 <memcpy>
				{0,0,0,0,0,1,1,0},{0,0,0,0,0,1,1,0},{0,0,0,0,0,1,1,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(characterJ);
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe01 	bl	8000690 <setMatrixBuffer>
		break;
 8000a8e:	e152      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'K': {
		int characterK[8][8] = {{0,1,1,0,0,0,1,0},{0,1,1,0,0,1,0,0},
 8000a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000a94:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a98:	4a3e      	ldr	r2, [pc, #248]	; (8000b94 <setCharacter+0x4ac>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	f001 fe9e 	bl	80027e4 <memcpy>
				{0,1,1,0,1,0,0,0},{0,1,1,1,0,0,0,0},{0,1,1,0,1,0,0,0},
				{0,1,1,0,0,1,0,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0}};
		setMatrixBuffer(characterK);
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fdef 	bl	8000690 <setMatrixBuffer>
		break;
 8000ab2:	e140      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'L': {
		int characterL[8][8] = {{0,1,1,0,0,0,0,0},{0,1,1,0,0,0,0,0},
 8000ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ab8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000abc:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <setCharacter+0x4b0>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	f001 fe8c 	bl	80027e4 <memcpy>
				{0,1,1,0,0,0,0,0},{0,1,1,0,0,0,0,0},{0,1,1,0,0,0,0,0},
				{0,1,1,0,0,0,0,0},{0,1,1,0,0,0,0,0},{0,1,1,1,1,1,1,0}};
		setMatrixBuffer(characterL);
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fddd 	bl	8000690 <setMatrixBuffer>
		break;
 8000ad6:	e12e      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'M': {
		int characterM[8][8] = {{1,1,0,0,0,0,1,1},{1,1,1,0,0,1,1,1},
 8000ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000adc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ae0:	4a2e      	ldr	r2, [pc, #184]	; (8000b9c <setCharacter+0x4b4>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aea:	461a      	mov	r2, r3
 8000aec:	f001 fe7a 	bl	80027e4 <memcpy>
				{1,1,0,1,1,0,1,1},{1,1,0,0,0,0,1,1},{1,1,0,0,0,0,1,1},
				{1,1,0,0,0,0,1,1},{1,1,0,0,0,0,1,1},{1,1,0,0,0,0,1,1}};
		setMatrixBuffer(characterM);
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fdcb 	bl	8000690 <setMatrixBuffer>
		break;
 8000afa:	e11c      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'N': {
		int characterN[8][8] = {{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
 8000afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b00:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b04:	4a26      	ldr	r2, [pc, #152]	; (8000ba0 <setCharacter+0x4b8>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	4611      	mov	r1, r2
 8000b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0e:	461a      	mov	r2, r3
 8000b10:	f001 fe68 	bl	80027e4 <memcpy>
				{0,1,1,1,0,1,1,0},{0,1,1,0,1,1,1,0},{0,1,1,0,0,1,1,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0}};
		setMatrixBuffer(characterN);
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fdb9 	bl	8000690 <setMatrixBuffer>
		break;
 8000b1e:	e10a      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'O': {
		int characterO[8][8] = {{0,0,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
 8000b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000b24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000b28:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <setCharacter+0x4bc>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b32:	461a      	mov	r2, r3
 8000b34:	f001 fe56 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(characterO);
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fda7 	bl	8000690 <setMatrixBuffer>
		break;
 8000b42:	e0f8      	b.n	8000d36 <setCharacter+0x64e>
 8000b44:	08002818 	.word	0x08002818
 8000b48:	08002918 	.word	0x08002918
 8000b4c:	08002a18 	.word	0x08002a18
 8000b50:	08002b18 	.word	0x08002b18
 8000b54:	08002c18 	.word	0x08002c18
 8000b58:	08002d18 	.word	0x08002d18
 8000b5c:	08002e18 	.word	0x08002e18
 8000b60:	08002f18 	.word	0x08002f18
 8000b64:	08003018 	.word	0x08003018
 8000b68:	08003118 	.word	0x08003118
 8000b6c:	08003218 	.word	0x08003218
 8000b70:	08003318 	.word	0x08003318
 8000b74:	08003418 	.word	0x08003418
 8000b78:	08003518 	.word	0x08003518
 8000b7c:	08003618 	.word	0x08003618
 8000b80:	08003718 	.word	0x08003718
 8000b84:	08003818 	.word	0x08003818
 8000b88:	08003918 	.word	0x08003918
 8000b8c:	08003a18 	.word	0x08003a18
 8000b90:	08003b18 	.word	0x08003b18
 8000b94:	08003c18 	.word	0x08003c18
 8000b98:	08003d18 	.word	0x08003d18
 8000b9c:	08003e18 	.word	0x08003e18
 8000ba0:	08003f18 	.word	0x08003f18
 8000ba4:	08004018 	.word	0x08004018
	}
	case 'P': {
		int characterP[8][8] = {{0,1,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
 8000ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000bb0:	4a63      	ldr	r2, [pc, #396]	; (8000d40 <setCharacter+0x658>)
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bba:	461a      	mov	r2, r3
 8000bbc:	f001 fe12 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,1,1,1,0,0},
				{0,1,1,0,0,0,0,0},{0,1,1,0,0,0,0,0},{0,1,1,0,0,0,0,0}};
		setMatrixBuffer(characterP);
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fd63 	bl	8000690 <setMatrixBuffer>
		break;
 8000bca:	e0b4      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'Q': {
		int characterQ[8][8] = {{0,0,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
 8000bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bd0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000bd4:	4a5b      	ldr	r2, [pc, #364]	; (8000d44 <setCharacter+0x65c>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	4611      	mov	r1, r2
 8000bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bde:	461a      	mov	r2, r3
 8000be0:	f001 fe00 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
				{0,1,1,0,1,1,1,0},{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,0,1}};
		setMatrixBuffer(characterQ);
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fd51 	bl	8000690 <setMatrixBuffer>
		break;
 8000bee:	e0a2      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'R': {
		int characterR[8][8] = {{0,1,1,1,1,1,0,0},{0,1,1,0,0,1,1,0},
 8000bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000bf4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000bf8:	4a53      	ldr	r2, [pc, #332]	; (8000d48 <setCharacter+0x660>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c02:	461a      	mov	r2, r3
 8000c04:	f001 fdee 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,1,1,1,0,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0}};
		setMatrixBuffer(characterR);
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fd3f 	bl	8000690 <setMatrixBuffer>
		break;
 8000c12:	e090      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'S': {
		int characterS[8][8] = {{0,0,1,1,1,1,0,0},{0,1,1,0,0,0,1,0},
 8000c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000c1c:	4a4b      	ldr	r2, [pc, #300]	; (8000d4c <setCharacter+0x664>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	4611      	mov	r1, r2
 8000c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c26:	461a      	mov	r2, r3
 8000c28:	f001 fddc 	bl	80027e4 <memcpy>
				{0,1,1,0,0,0,0,0},{0,0,1,1,1,1,0,0},{0,0,0,0,0,1,1,0},
				{0,0,0,0,0,1,1,0},{0,1,0,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(characterS);
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fd2d 	bl	8000690 <setMatrixBuffer>
		break;
 8000c36:	e07e      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'T': {
		int characterT[8][8] = {{0,1,1,1,1,1,1,0},{0,0,0,1,1,0,0,0},
 8000c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000c40:	4a43      	ldr	r2, [pc, #268]	; (8000d50 <setCharacter+0x668>)
 8000c42:	4618      	mov	r0, r3
 8000c44:	4611      	mov	r1, r2
 8000c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	f001 fdca 	bl	80027e4 <memcpy>
				{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0},
				{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0}};
		setMatrixBuffer(characterT);
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fd1b 	bl	8000690 <setMatrixBuffer>
		break;
 8000c5a:	e06c      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'U': {
		int characterU[8][8] = {{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
 8000c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c60:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000c64:	4a3b      	ldr	r2, [pc, #236]	; (8000d54 <setCharacter+0x66c>)
 8000c66:	4618      	mov	r0, r3
 8000c68:	4611      	mov	r1, r2
 8000c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f001 fdb8 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,0,1,1,1,1,0,0}};
		setMatrixBuffer(characterU);
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fd09 	bl	8000690 <setMatrixBuffer>
		break;
 8000c7e:	e05a      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'V': {
		int characterV[8][8] = {{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
 8000c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000c84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000c88:	4a33      	ldr	r2, [pc, #204]	; (8000d58 <setCharacter+0x670>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c92:	461a      	mov	r2, r3
 8000c94:	f001 fda6 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
				{0,1,1,0,0,1,1,0},{0,0,1,0,0,1,0,0},{0,0,0,1,1,0,0,0}};
		setMatrixBuffer(characterV);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fcf7 	bl	8000690 <setMatrixBuffer>
		break;
 8000ca2:	e048      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'W': {
		int characterW[8][8] = {{1,1,0,0,0,0,1,1},{1,1,0,0,0,0,1,1},
 8000ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ca8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000cac:	4a2b      	ldr	r2, [pc, #172]	; (8000d5c <setCharacter+0x674>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f001 fd94 	bl	80027e4 <memcpy>
				{1,1,0,1,1,0,1,1},{1,1,0,1,1,0,1,1},{1,1,0,1,1,0,1,1},
				{1,1,0,1,1,0,1,1},{1,1,1,0,0,1,1,1},{0,1,0,0,0,0,1,0}};
		setMatrixBuffer(characterW);
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fce5 	bl	8000690 <setMatrixBuffer>
		break;
 8000cc6:	e036      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'X': {
		int characterX[8][8] = {{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
 8000cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000ccc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000cd0:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <setCharacter+0x678>)
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f001 fd82 	bl	80027e4 <memcpy>
				{0,0,1,0,0,1,0,0},{0,0,0,1,1,0,0,0},{0,0,1,0,0,1,0,0},
				{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0}};
		setMatrixBuffer(characterX);
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fcd3 	bl	8000690 <setMatrixBuffer>
		break;
 8000cea:	e024      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'Y': {
		int characterY[8][8] = {{0,1,1,0,0,1,1,0},{0,1,1,0,0,1,1,0},
 8000cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000cf0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <setCharacter+0x67c>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfe:	461a      	mov	r2, r3
 8000d00:	f001 fd70 	bl	80027e4 <memcpy>
				{0,1,1,0,0,1,1,0},{0,0,1,0,0,1,0,0},{0,0,0,1,1,0,0,0},
				{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0},{0,0,0,1,1,0,0,0}};
		setMatrixBuffer(characterY);
 8000d04:	f107 0308 	add.w	r3, r7, #8
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fcc1 	bl	8000690 <setMatrixBuffer>
		break;
 8000d0e:	e012      	b.n	8000d36 <setCharacter+0x64e>
	}
	case 'Z': {
		int characterZ[8][8] = {{0,1,1,1,1,1,1,0},{0,0,0,0,0,1,1,0},
 8000d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000d14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <setCharacter+0x680>)
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d22:	461a      	mov	r2, r3
 8000d24:	f001 fd5e 	bl	80027e4 <memcpy>
				{0,0,0,0,0,1,0,0},{0,0,0,0,1,0,0,0},{0,0,0,1,0,0,0,0},
				{0,0,1,0,0,0,0,0},{0,1,1,0,0,0,0,0},{0,1,1,1,1,1,1,0}};
		setMatrixBuffer(characterZ);
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcaf 	bl	8000690 <setMatrixBuffer>
		break;
 8000d32:	e000      	b.n	8000d36 <setCharacter+0x64e>
	}
	default:
		break;
 8000d34:	bf00      	nop
	}
}
 8000d36:	bf00      	nop
 8000d38:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	08004118 	.word	0x08004118
 8000d44:	08004218 	.word	0x08004218
 8000d48:	08004318 	.word	0x08004318
 8000d4c:	08004418 	.word	0x08004418
 8000d50:	08004518 	.word	0x08004518
 8000d54:	08004618 	.word	0x08004618
 8000d58:	08004718 	.word	0x08004718
 8000d5c:	08004818 	.word	0x08004818
 8000d60:	08004918 	.word	0x08004918
 8000d64:	08004a18 	.word	0x08004a18
 8000d68:	08004b18 	.word	0x08004b18

08000d6c <shiftRight>:
	}
	for (int i = 0; i < 8; i ++) {
		matrix_buffer[i][7] = temp[i];
	}
}
void shiftRight() {
 8000d6c:	b4b0      	push	{r4, r5, r7}
 8000d6e:	b08d      	sub	sp, #52	; 0x34
 8000d70:	af00      	add	r7, sp, #0
	int temp[8] = {0, 1, 2, 3, 4, 5, 6, 7};
 8000d72:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <shiftRight+0xb8>)
 8000d74:	463c      	mov	r4, r7
 8000d76:	461d      	mov	r5, r3
 8000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (int i = 0; i < 8; i ++) {
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d88:	e00e      	b.n	8000da8 <shiftRight+0x3c>
		temp[i] = matrix_buffer[i][7];
 8000d8a:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <shiftRight+0xbc>)
 8000d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8e:	015b      	lsls	r3, r3, #5
 8000d90:	4413      	add	r3, r2
 8000d92:	331c      	adds	r3, #28
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	3330      	adds	r3, #48	; 0x30
 8000d9c:	443b      	add	r3, r7
 8000d9e:	f843 2c30 	str.w	r2, [r3, #-48]
	for (int i = 0; i < 8; i ++) {
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	3301      	adds	r3, #1
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000daa:	2b07      	cmp	r3, #7
 8000dac:	dded      	ble.n	8000d8a <shiftRight+0x1e>
	}
	for (int i = 0; i < 8; i ++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000db2:	e01a      	b.n	8000dea <shiftRight+0x7e>
		for (int j = 7; j > 0; j --) {
 8000db4:	2307      	movs	r3, #7
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
 8000db8:	e011      	b.n	8000dde <shiftRight+0x72>
			matrix_buffer[i][j] = matrix_buffer[i][j-1];
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	491a      	ldr	r1, [pc, #104]	; (8000e28 <shiftRight+0xbc>)
 8000dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dc2:	00d2      	lsls	r2, r2, #3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000dca:	4817      	ldr	r0, [pc, #92]	; (8000e28 <shiftRight+0xbc>)
 8000dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dce:	00d9      	lsls	r1, r3, #3
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (int j = 7; j > 0; j --) {
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dcea      	bgt.n	8000dba <shiftRight+0x4e>
	for (int i = 0; i < 8; i ++) {
 8000de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de6:	3301      	adds	r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	dde1      	ble.n	8000db4 <shiftRight+0x48>
		}
	}
	for (int i = 0; i < 8; i ++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
 8000df4:	e00d      	b.n	8000e12 <shiftRight+0xa6>
		matrix_buffer[i][0] = temp[i];
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	3330      	adds	r3, #48	; 0x30
 8000dfc:	443b      	add	r3, r7
 8000dfe:	f853 2c30 	ldr.w	r2, [r3, #-48]
 8000e02:	4909      	ldr	r1, [pc, #36]	; (8000e28 <shiftRight+0xbc>)
 8000e04:	6a3b      	ldr	r3, [r7, #32]
 8000e06:	015b      	lsls	r3, r3, #5
 8000e08:	440b      	add	r3, r1
 8000e0a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 8; i ++) {
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	623b      	str	r3, [r7, #32]
 8000e12:	6a3b      	ldr	r3, [r7, #32]
 8000e14:	2b07      	cmp	r3, #7
 8000e16:	ddee      	ble.n	8000df6 <shiftRight+0x8a>
	}
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3734      	adds	r7, #52	; 0x34
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bcb0      	pop	{r4, r5, r7}
 8000e22:	4770      	bx	lr
 8000e24:	08004c18 	.word	0x08004c18
 8000e28:	20000084 	.word	0x20000084

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e30:	f000 f9dc 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e34:	f000 f848 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e38:	f000 f8ce 	bl	8000fd8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e3c:	f000 f880 	bl	8000f40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e40:	481c      	ldr	r0, [pc, #112]	; (8000eb4 <main+0x88>)
 8000e42:	f001 f90f 	bl	8002064 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2120      	movs	r1, #32
 8000e4a:	481b      	ldr	r0, [pc, #108]	; (8000eb8 <main+0x8c>)
 8000e4c:	f000 fcba 	bl	80017c4 <HAL_GPIO_WritePin>
  setTimer0(MATRIX_CYCLE);
 8000e50:	2364      	movs	r3, #100	; 0x64
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff f97a 	bl	800014c <setTimer0>
  setTimer1(SHIFT_CYCLE);
 8000e58:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff f9a5 	bl	80001ac <setTimer1>
  setCharacter('H');
 8000e62:	2048      	movs	r0, #72	; 0x48
 8000e64:	f7ff fc40 	bl	80006e8 <setCharacter>
  while (1)
  {
	  displayLEDMatrix(index_led_matrix);
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <main+0x90>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fb61 	bl	8000534 <displayLEDMatrix>
	  if (timer0_flag == 1) {
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <main+0x94>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d110      	bne.n	8000e9c <main+0x70>
		  index_led_matrix ++;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <main+0x90>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <main+0x90>)
 8000e82:	6013      	str	r3, [r2, #0]
		  if (index_led_matrix >= MAX_LED_MATRIX) index_led_matrix = 0;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <main+0x90>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2208      	movs	r2, #8
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	db02      	blt.n	8000e94 <main+0x68>
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <main+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
		  setTimer0(MATRIX_CYCLE);
 8000e94:	2364      	movs	r3, #100	; 0x64
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff f958 	bl	800014c <setTimer0>
	  }
	  if (timer1_flag == 1) {
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <main+0x98>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d1e1      	bne.n	8000e68 <main+0x3c>
		  shiftRight();
 8000ea4:	f7ff ff62 	bl	8000d6c <shiftRight>
		  setTimer1(SHIFT_CYCLE);
 8000ea8:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff f97d 	bl	80001ac <setTimer1>
	  displayLEDMatrix(index_led_matrix);
 8000eb2:	e7d9      	b.n	8000e68 <main+0x3c>
 8000eb4:	20000028 	.word	0x20000028
 8000eb8:	40010800 	.word	0x40010800
 8000ebc:	20000080 	.word	0x20000080
 8000ec0:	20000074 	.word	0x20000074
 8000ec4:	2000007c 	.word	0x2000007c

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b090      	sub	sp, #64	; 0x40
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	2228      	movs	r2, #40	; 0x28
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 fc58 	bl	800278c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef2:	2310      	movs	r3, #16
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efa:	f107 0318 	add.w	r3, r7, #24
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fc78 	bl	80017f4 <HAL_RCC_OscConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f0a:	f000 f8c5 	bl	8001098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0e:	230f      	movs	r3, #15
 8000f10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fee6 	bl	8001cf8 <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f32:	f000 f8b1 	bl	8001098 <Error_Handler>
  }
}
 8000f36:	bf00      	nop
 8000f38:	3740      	adds	r7, #64	; 0x40
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <MX_TIM2_Init+0x94>)
 8000f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <MX_TIM2_Init+0x94>)
 8000f66:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_TIM2_Init+0x94>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_TIM2_Init+0x94>)
 8000f74:	2209      	movs	r2, #9
 8000f76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_TIM2_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_TIM2_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f84:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <MX_TIM2_Init+0x94>)
 8000f86:	f001 f81d 	bl	8001fc4 <HAL_TIM_Base_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f90:	f000 f882 	bl	8001098 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <MX_TIM2_Init+0x94>)
 8000fa2:	f001 f9b3 	bl	800230c <HAL_TIM_ConfigClockSource>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fac:	f000 f874 	bl	8001098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_TIM2_Init+0x94>)
 8000fbe:	f001 fb7b 	bl	80026b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fc8:	f000 f866 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000028 	.word	0x20000028

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <MX_GPIO_Init+0x9c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a20      	ldr	r2, [pc, #128]	; (8001074 <MX_GPIO_Init+0x9c>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_GPIO_Init+0x9c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <MX_GPIO_Init+0x9c>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a1a      	ldr	r2, [pc, #104]	; (8001074 <MX_GPIO_Init+0x9c>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <MX_GPIO_Init+0x9c>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2120      	movs	r1, #32
 8001020:	4815      	ldr	r0, [pc, #84]	; (8001078 <MX_GPIO_Init+0xa0>)
 8001022:	f000 fbcf 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENM0_Pin|ENM1_Pin|ENM2_Pin|ROW2_Pin
 8001026:	2200      	movs	r2, #0
 8001028:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800102c:	4813      	ldr	r0, [pc, #76]	; (800107c <MX_GPIO_Init+0xa4>)
 800102e:	f000 fbc9 	bl	80017c4 <HAL_GPIO_WritePin>
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin|ROW0_Pin|ROW1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001032:	2320      	movs	r3, #32
 8001034:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2302      	movs	r3, #2
 8001040:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4619      	mov	r1, r3
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <MX_GPIO_Init+0xa0>)
 800104a:	f000 fa3f 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin ENM2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|ENM2_Pin|ROW2_Pin
 800104e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001052:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2302      	movs	r3, #2
 800105e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_GPIO_Init+0xa4>)
 8001068:	f000 fa30 	bl	80014cc <HAL_GPIO_Init>

}
 800106c:	bf00      	nop
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800
 800107c:	40010c00 	.word	0x40010c00

08001080 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	runTimer0();
 8001088:	f7ff f876 	bl	8000178 <runTimer0>
	runTimer1();
 800108c:	f7ff f8a4 	bl	80001d8 <runTimer1>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x8>
	...

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_MspInit+0x40>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <HAL_MspInit+0x40>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6193      	str	r3, [r2, #24]
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_MspInit+0x40>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_MspInit+0x40>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_MspInit+0x40>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_MspInit+0x40>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f8:	d113      	bne.n	8001122 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_TIM_Base_MspInit+0x44>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_TIM_Base_MspInit+0x44>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	61d3      	str	r3, [r2, #28]
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_TIM_Base_MspInit+0x44>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	201c      	movs	r0, #28
 8001118:	f000 f9a1 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800111c:	201c      	movs	r0, #28
 800111e:	f000 f9ba 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <NMI_Handler+0x4>

08001136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <MemManage_Handler+0x4>

08001142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <BusFault_Handler+0x4>

08001148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <UsageFault_Handler+0x4>

0800114e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001176:	f000 f87f 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM2_IRQHandler+0x10>)
 8001186:	f000 ffb9 	bl	80020fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000028 	.word	0x20000028

08001194 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480c      	ldr	r0, [pc, #48]	; (80011d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011a2:	490d      	ldr	r1, [pc, #52]	; (80011d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b8:	4c0a      	ldr	r4, [pc, #40]	; (80011e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011c6:	f7ff ffe5 	bl	8001194 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ca:	f001 fae7 	bl	800279c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ce:	f7ff fe2d 	bl	8000e2c <main>
  bx lr
 80011d2:	4770      	bx	lr
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011dc:	08004c60 	.word	0x08004c60
  ldr r2, =_sbss
 80011e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011e4:	20000188 	.word	0x20000188

080011e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_2_IRQHandler>
	...

080011ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_Init+0x28>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_Init+0x28>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 f923 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001202:	200f      	movs	r0, #15
 8001204:	f000 f808 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff ff4c 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f93b 	bl	80014b2 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 f903 	bl	800145e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	; (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000000 	.word	0x20000000
 8001270:	20000008 	.word	0x20000008
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x1c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_IncTick+0x20>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a03      	ldr	r2, [pc, #12]	; (8001298 <HAL_IncTick+0x20>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	20000008 	.word	0x20000008
 8001298:	20000184 	.word	0x20000184

0800129c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b02      	ldr	r3, [pc, #8]	; (80012ac <HAL_GetTick+0x10>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	20000184 	.word	0x20000184

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4906      	ldr	r1, [pc, #24]	; (8001348 <__NVIC_EnableIRQ+0x34>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	; (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001414:	d301      	bcc.n	800141a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001416:	2301      	movs	r3, #1
 8001418:	e00f      	b.n	800143a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <SysTick_Config+0x40>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001422:	210f      	movs	r1, #15
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f7ff ff90 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <SysTick_Config+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <SysTick_Config+0x40>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff2d 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001470:	f7ff ff42 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff90 	bl	80013a0 <NVIC_EncodePriority>
 8001480:	4602      	mov	r2, r0
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff5f 	bl	800134c <__NVIC_SetPriority>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff35 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffa2 	bl	8001404 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b08b      	sub	sp, #44	; 0x2c
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	e161      	b.n	80017a4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e0:	2201      	movs	r2, #1
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 8150 	bne.w	800179e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a97      	ldr	r2, [pc, #604]	; (8001760 <HAL_GPIO_Init+0x294>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d05e      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001508:	4a95      	ldr	r2, [pc, #596]	; (8001760 <HAL_GPIO_Init+0x294>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d875      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800150e:	4a95      	ldr	r2, [pc, #596]	; (8001764 <HAL_GPIO_Init+0x298>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d058      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001514:	4a93      	ldr	r2, [pc, #588]	; (8001764 <HAL_GPIO_Init+0x298>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d86f      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800151a:	4a93      	ldr	r2, [pc, #588]	; (8001768 <HAL_GPIO_Init+0x29c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d052      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001520:	4a91      	ldr	r2, [pc, #580]	; (8001768 <HAL_GPIO_Init+0x29c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d869      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001526:	4a91      	ldr	r2, [pc, #580]	; (800176c <HAL_GPIO_Init+0x2a0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d04c      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 800152c:	4a8f      	ldr	r2, [pc, #572]	; (800176c <HAL_GPIO_Init+0x2a0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d863      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001532:	4a8f      	ldr	r2, [pc, #572]	; (8001770 <HAL_GPIO_Init+0x2a4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d046      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001538:	4a8d      	ldr	r2, [pc, #564]	; (8001770 <HAL_GPIO_Init+0x2a4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d85d      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800153e:	2b12      	cmp	r3, #18
 8001540:	d82a      	bhi.n	8001598 <HAL_GPIO_Init+0xcc>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d859      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001546:	a201      	add	r2, pc, #4	; (adr r2, 800154c <HAL_GPIO_Init+0x80>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015a1 	.word	0x080015a1
 8001554:	080015b3 	.word	0x080015b3
 8001558:	080015f5 	.word	0x080015f5
 800155c:	080015fb 	.word	0x080015fb
 8001560:	080015fb 	.word	0x080015fb
 8001564:	080015fb 	.word	0x080015fb
 8001568:	080015fb 	.word	0x080015fb
 800156c:	080015fb 	.word	0x080015fb
 8001570:	080015fb 	.word	0x080015fb
 8001574:	080015fb 	.word	0x080015fb
 8001578:	080015fb 	.word	0x080015fb
 800157c:	080015fb 	.word	0x080015fb
 8001580:	080015fb 	.word	0x080015fb
 8001584:	080015fb 	.word	0x080015fb
 8001588:	080015fb 	.word	0x080015fb
 800158c:	080015fb 	.word	0x080015fb
 8001590:	080015a9 	.word	0x080015a9
 8001594:	080015bd 	.word	0x080015bd
 8001598:	4a76      	ldr	r2, [pc, #472]	; (8001774 <HAL_GPIO_Init+0x2a8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800159e:	e02c      	b.n	80015fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e029      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	3304      	adds	r3, #4
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e024      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	3308      	adds	r3, #8
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e01f      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	330c      	adds	r3, #12
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e01a      	b.n	80015fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ce:	2304      	movs	r3, #4
 80015d0:	623b      	str	r3, [r7, #32]
          break;
 80015d2:	e013      	b.n	80015fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015dc:	2308      	movs	r3, #8
 80015de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	611a      	str	r2, [r3, #16]
          break;
 80015e6:	e009      	b.n	80015fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e8:	2308      	movs	r3, #8
 80015ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	615a      	str	r2, [r3, #20]
          break;
 80015f2:	e003      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x130>
          break;
 80015fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2bff      	cmp	r3, #255	; 0xff
 8001600:	d801      	bhi.n	8001606 <HAL_GPIO_Init+0x13a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	e001      	b.n	800160a <HAL_GPIO_Init+0x13e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2bff      	cmp	r3, #255	; 0xff
 8001610:	d802      	bhi.n	8001618 <HAL_GPIO_Init+0x14c>
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x152>
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	3b08      	subs	r3, #8
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	210f      	movs	r1, #15
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	6a39      	ldr	r1, [r7, #32]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	431a      	orrs	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80a9 	beq.w	800179e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800164c:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_GPIO_Init+0x2ac>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a49      	ldr	r2, [pc, #292]	; (8001778 <HAL_GPIO_Init+0x2ac>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_GPIO_Init+0x2ac>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001664:	4a45      	ldr	r2, [pc, #276]	; (800177c <HAL_GPIO_Init+0x2b0>)
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a3d      	ldr	r2, [pc, #244]	; (8001780 <HAL_GPIO_Init+0x2b4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d00d      	beq.n	80016ac <HAL_GPIO_Init+0x1e0>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3c      	ldr	r2, [pc, #240]	; (8001784 <HAL_GPIO_Init+0x2b8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d007      	beq.n	80016a8 <HAL_GPIO_Init+0x1dc>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a3b      	ldr	r2, [pc, #236]	; (8001788 <HAL_GPIO_Init+0x2bc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d101      	bne.n	80016a4 <HAL_GPIO_Init+0x1d8>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e004      	b.n	80016ae <HAL_GPIO_Init+0x1e2>
 80016a4:	2303      	movs	r3, #3
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_Init+0x1e2>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_GPIO_Init+0x1e2>
 80016ac:	2300      	movs	r3, #0
 80016ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b0:	f002 0203 	and.w	r2, r2, #3
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	4093      	lsls	r3, r2
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016be:	492f      	ldr	r1, [pc, #188]	; (800177c <HAL_GPIO_Init+0x2b0>)
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d8:	4b2c      	ldr	r3, [pc, #176]	; (800178c <HAL_GPIO_Init+0x2c0>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	492b      	ldr	r1, [pc, #172]	; (800178c <HAL_GPIO_Init+0x2c0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e6:	4b29      	ldr	r3, [pc, #164]	; (800178c <HAL_GPIO_Init+0x2c0>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4927      	ldr	r1, [pc, #156]	; (800178c <HAL_GPIO_Init+0x2c0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_GPIO_Init+0x2c0>)
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4921      	ldr	r1, [pc, #132]	; (800178c <HAL_GPIO_Init+0x2c0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800170e:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_GPIO_Init+0x2c0>)
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	491d      	ldr	r1, [pc, #116]	; (800178c <HAL_GPIO_Init+0x2c0>)
 8001718:	4013      	ands	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <HAL_GPIO_Init+0x2c0>)
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	4917      	ldr	r1, [pc, #92]	; (800178c <HAL_GPIO_Init+0x2c0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	608b      	str	r3, [r1, #8]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_GPIO_Init+0x2c0>)
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	4913      	ldr	r1, [pc, #76]	; (800178c <HAL_GPIO_Init+0x2c0>)
 8001740:	4013      	ands	r3, r2
 8001742:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01f      	beq.n	8001790 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_GPIO_Init+0x2c0>)
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	490d      	ldr	r1, [pc, #52]	; (800178c <HAL_GPIO_Init+0x2c0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	60cb      	str	r3, [r1, #12]
 800175c:	e01f      	b.n	800179e <HAL_GPIO_Init+0x2d2>
 800175e:	bf00      	nop
 8001760:	10320000 	.word	0x10320000
 8001764:	10310000 	.word	0x10310000
 8001768:	10220000 	.word	0x10220000
 800176c:	10210000 	.word	0x10210000
 8001770:	10120000 	.word	0x10120000
 8001774:	10110000 	.word	0x10110000
 8001778:	40021000 	.word	0x40021000
 800177c:	40010000 	.word	0x40010000
 8001780:	40010800 	.word	0x40010800
 8001784:	40010c00 	.word	0x40010c00
 8001788:	40011000 	.word	0x40011000
 800178c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_GPIO_Init+0x2f4>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	43db      	mvns	r3, r3
 8001798:	4909      	ldr	r1, [pc, #36]	; (80017c0 <HAL_GPIO_Init+0x2f4>)
 800179a:	4013      	ands	r3, r2
 800179c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	3301      	adds	r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f47f ae96 	bne.w	80014e0 <HAL_GPIO_Init+0x14>
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	372c      	adds	r7, #44	; 0x2c
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017e0:	e003      	b.n	80017ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	041a      	lsls	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	611a      	str	r2, [r3, #16]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e272      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8087 	beq.w	8001922 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001814:	4b92      	ldr	r3, [pc, #584]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b04      	cmp	r3, #4
 800181e:	d00c      	beq.n	800183a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001820:	4b8f      	ldr	r3, [pc, #572]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d112      	bne.n	8001852 <HAL_RCC_OscConfig+0x5e>
 800182c:	4b8c      	ldr	r3, [pc, #560]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001838:	d10b      	bne.n	8001852 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183a:	4b89      	ldr	r3, [pc, #548]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d06c      	beq.n	8001920 <HAL_RCC_OscConfig+0x12c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d168      	bne.n	8001920 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e24c      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x76>
 800185c:	4b80      	ldr	r3, [pc, #512]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a7f      	ldr	r2, [pc, #508]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e02e      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x98>
 8001872:	4b7b      	ldr	r3, [pc, #492]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7a      	ldr	r2, [pc, #488]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b78      	ldr	r3, [pc, #480]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a77      	ldr	r2, [pc, #476]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e01d      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0xbc>
 8001896:	4b72      	ldr	r3, [pc, #456]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a71      	ldr	r2, [pc, #452]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b6f      	ldr	r3, [pc, #444]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a6e      	ldr	r2, [pc, #440]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 80018b0:	4b6b      	ldr	r3, [pc, #428]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6a      	ldr	r2, [pc, #424]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b68      	ldr	r3, [pc, #416]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a67      	ldr	r2, [pc, #412]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d013      	beq.n	80018f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fce4 	bl	800129c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fce0 	bl	800129c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e200      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b5d      	ldr	r3, [pc, #372]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0xe4>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fcd0 	bl	800129c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fccc 	bl	800129c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1ec      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x10c>
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d063      	beq.n	80019f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192e:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800193a:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d11c      	bne.n	8001980 <HAL_RCC_OscConfig+0x18c>
 8001946:	4b46      	ldr	r3, [pc, #280]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x176>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1c0      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4939      	ldr	r1, [pc, #228]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	e03a      	b.n	80019f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001988:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <HAL_RCC_OscConfig+0x270>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff fc85 	bl	800129c <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff fc81 	bl	800129c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1a1      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4927      	ldr	r1, [pc, #156]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
 80019c8:	e015      	b.n	80019f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_RCC_OscConfig+0x270>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fc64 	bl	800129c <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff fc60 	bl	800129c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e180      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d03a      	beq.n	8001a78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d019      	beq.n	8001a3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff fc44 	bl	800129c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff fc40 	bl	800129c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e160      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f000 faa6 	bl	8001f88 <RCC_Delay>
 8001a3c:	e01c      	b.n	8001a78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff fc2a 	bl	800129c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4a:	e00f      	b.n	8001a6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fc26 	bl	800129c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d908      	bls.n	8001a6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e146      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	42420000 	.word	0x42420000
 8001a68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	4b92      	ldr	r3, [pc, #584]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e9      	bne.n	8001a4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a6 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10d      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a87      	ldr	r2, [pc, #540]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b85      	ldr	r3, [pc, #532]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab2:	4b82      	ldr	r3, [pc, #520]	; (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d118      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001abe:	4b7f      	ldr	r3, [pc, #508]	; (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a7e      	ldr	r2, [pc, #504]	; (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aca:	f7ff fbe7 	bl	800129c <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad2:	f7ff fbe3 	bl	800129c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b64      	cmp	r3, #100	; 0x64
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e103      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	4b75      	ldr	r3, [pc, #468]	; (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x312>
 8001af8:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a6e      	ldr	r2, [pc, #440]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	e02d      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x334>
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4a69      	ldr	r2, [pc, #420]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6213      	str	r3, [r2, #32]
 8001b1a:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a66      	ldr	r2, [pc, #408]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	6213      	str	r3, [r2, #32]
 8001b26:	e01c      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d10c      	bne.n	8001b4a <HAL_RCC_OscConfig+0x356>
 8001b30:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a60      	ldr	r2, [pc, #384]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6213      	str	r3, [r2, #32]
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a5d      	ldr	r2, [pc, #372]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	e00b      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a5a      	ldr	r2, [pc, #360]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a57      	ldr	r2, [pc, #348]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d015      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fb97 	bl	800129c <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff fb93 	bl	800129c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0b1      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b88:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ee      	beq.n	8001b72 <HAL_RCC_OscConfig+0x37e>
 8001b94:	e014      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fb81 	bl	800129c <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff fb7d 	bl	800129c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e09b      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb4:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ee      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d105      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a3b      	ldr	r2, [pc, #236]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8087 	beq.w	8001cea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d061      	beq.n	8001cac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d146      	bne.n	8001c7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf0:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fb51 	bl	800129c <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff fb4d 	bl	800129c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e06d      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d108      	bne.n	8001c38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	4921      	ldr	r1, [pc, #132]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a19      	ldr	r1, [r3, #32]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	491b      	ldr	r1, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fb21 	bl	800129c <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff fb1d 	bl	800129c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e03d      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x46a>
 8001c7c:	e035      	b.n	8001cea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fb0a 	bl	800129c <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff fb06 	bl	800129c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e026      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x498>
 8001caa:	e01e      	b.n	8001cea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e019      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_OscConfig+0x500>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0d0      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d910      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4965      	ldr	r1, [pc, #404]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d040      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d115      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e073      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06b      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4936      	ldr	r1, [pc, #216]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de8:	f7ff fa58 	bl	800129c <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7ff fa54 	bl	800129c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e053      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d210      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4922      	ldr	r1, [pc, #136]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	490a      	ldr	r1, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f9b6 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08004c48 	.word	0x08004c48
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b490      	push	{r4, r7}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ed4:	1d3c      	adds	r4, r7, #4
 8001ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001edc:	f240 2301 	movw	r3, #513	; 0x201
 8001ee0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x40>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x46>
 8001f0a:	e02b      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f0e:	623b      	str	r3, [r7, #32]
      break;
 8001f10:	e02b      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3328      	adds	r3, #40	; 0x28
 8001f1c:	443b      	add	r3, r7
 8001f1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f22:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d012      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	0c5b      	lsrs	r3, r3, #17
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	3328      	adds	r3, #40	; 0x28
 8001f3a:	443b      	add	r3, r7
 8001f3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f46:	fb03 f202 	mul.w	r2, r3, r2
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
 8001f52:	e004      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	623b      	str	r3, [r7, #32]
      break;
 8001f62:	e002      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f66:	623b      	str	r3, [r7, #32]
      break;
 8001f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3728      	adds	r7, #40	; 0x28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc90      	pop	{r4, r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	08004c38 	.word	0x08004c38
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	007a1200 	.word	0x007a1200
 8001f84:	003d0900 	.word	0x003d0900

08001f88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <RCC_Delay+0x34>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <RCC_Delay+0x38>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0a5b      	lsrs	r3, r3, #9
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa4:	bf00      	nop
  }
  while (Delay --);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	60fa      	str	r2, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f9      	bne.n	8001fa4 <RCC_Delay+0x1c>
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	10624dd3 	.word	0x10624dd3

08001fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e041      	b.n	800205a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff f87c 	bl	80010e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3304      	adds	r3, #4
 8002000:	4619      	mov	r1, r3
 8002002:	4610      	mov	r0, r2
 8002004:	f000 fa6a 	bl	80024dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d001      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e035      	b.n	80020e8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_TIM_Base_Start_IT+0x90>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d009      	beq.n	80020b2 <HAL_TIM_Base_Start_IT+0x4e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a6:	d004      	beq.n	80020b2 <HAL_TIM_Base_Start_IT+0x4e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <HAL_TIM_Base_Start_IT+0x94>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d111      	bne.n	80020d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b06      	cmp	r3, #6
 80020c2:	d010      	beq.n	80020e6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d4:	e007      	b.n	80020e6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0201 	orr.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40012c00 	.word	0x40012c00
 80020f8:	40000400 	.word	0x40000400

080020fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d122      	bne.n	8002158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b02      	cmp	r3, #2
 800211e:	d11b      	bne.n	8002158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0202 	mvn.w	r2, #2
 8002128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f9b1 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f9a4 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f9b3 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b04      	cmp	r3, #4
 8002164:	d122      	bne.n	80021ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d11b      	bne.n	80021ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0204 	mvn.w	r2, #4
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f987 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f97a 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f989 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d122      	bne.n	8002200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d11b      	bne.n	8002200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0208 	mvn.w	r2, #8
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f95d 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f950 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f95f 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b10      	cmp	r3, #16
 800220c:	d122      	bne.n	8002254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b10      	cmp	r3, #16
 800221a:	d11b      	bne.n	8002254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0210 	mvn.w	r2, #16
 8002224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2208      	movs	r2, #8
 800222a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f933 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f926 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f935 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10e      	bne.n	8002280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d107      	bne.n	8002280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0201 	mvn.w	r2, #1
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe ff00 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228a:	2b80      	cmp	r3, #128	; 0x80
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d107      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fa67 	bl	800277a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	d10e      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d107      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f8f9 	bl	80024ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b20      	cmp	r3, #32
 80022e4:	d10e      	bne.n	8002304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d107      	bne.n	8002304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0220 	mvn.w	r2, #32
 80022fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fa32 	bl	8002768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_TIM_ConfigClockSource+0x18>
 8002320:	2302      	movs	r3, #2
 8002322:	e0b3      	b.n	800248c <HAL_TIM_ConfigClockSource+0x180>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002342:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800234a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235c:	d03e      	beq.n	80023dc <HAL_TIM_ConfigClockSource+0xd0>
 800235e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002362:	f200 8087 	bhi.w	8002474 <HAL_TIM_ConfigClockSource+0x168>
 8002366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236a:	f000 8085 	beq.w	8002478 <HAL_TIM_ConfigClockSource+0x16c>
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	d87f      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x168>
 8002374:	2b70      	cmp	r3, #112	; 0x70
 8002376:	d01a      	beq.n	80023ae <HAL_TIM_ConfigClockSource+0xa2>
 8002378:	2b70      	cmp	r3, #112	; 0x70
 800237a:	d87b      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x168>
 800237c:	2b60      	cmp	r3, #96	; 0x60
 800237e:	d050      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0x116>
 8002380:	2b60      	cmp	r3, #96	; 0x60
 8002382:	d877      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x168>
 8002384:	2b50      	cmp	r3, #80	; 0x50
 8002386:	d03c      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0xf6>
 8002388:	2b50      	cmp	r3, #80	; 0x50
 800238a:	d873      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x168>
 800238c:	2b40      	cmp	r3, #64	; 0x40
 800238e:	d058      	beq.n	8002442 <HAL_TIM_ConfigClockSource+0x136>
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d86f      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x168>
 8002394:	2b30      	cmp	r3, #48	; 0x30
 8002396:	d064      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x156>
 8002398:	2b30      	cmp	r3, #48	; 0x30
 800239a:	d86b      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x168>
 800239c:	2b20      	cmp	r3, #32
 800239e:	d060      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x156>
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d867      	bhi.n	8002474 <HAL_TIM_ConfigClockSource+0x168>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d05c      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x156>
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	d05a      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023ac:	e062      	b.n	8002474 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6899      	ldr	r1, [r3, #8]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f000 f95c 	bl	800267a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	609a      	str	r2, [r3, #8]
      break;
 80023da:	e04e      	b.n	800247a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f000 f945 	bl	800267a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023fe:	609a      	str	r2, [r3, #8]
      break;
 8002400:	e03b      	b.n	800247a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	461a      	mov	r2, r3
 8002410:	f000 f8bc 	bl	800258c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2150      	movs	r1, #80	; 0x50
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f913 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 8002420:	e02b      	b.n	800247a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	461a      	mov	r2, r3
 8002430:	f000 f8da 	bl	80025e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2160      	movs	r1, #96	; 0x60
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f903 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 8002440:	e01b      	b.n	800247a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6859      	ldr	r1, [r3, #4]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	461a      	mov	r2, r3
 8002450:	f000 f89c 	bl	800258c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2140      	movs	r1, #64	; 0x40
 800245a:	4618      	mov	r0, r3
 800245c:	f000 f8f3 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 8002460:	e00b      	b.n	800247a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f000 f8ea 	bl	8002646 <TIM_ITRx_SetConfig>
        break;
 8002472:	e002      	b.n	800247a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002474:	bf00      	nop
 8002476:	e000      	b.n	800247a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002478:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a25      	ldr	r2, [pc, #148]	; (8002584 <TIM_Base_SetConfig+0xa8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d007      	beq.n	8002504 <TIM_Base_SetConfig+0x28>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fa:	d003      	beq.n	8002504 <TIM_Base_SetConfig+0x28>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a22      	ldr	r2, [pc, #136]	; (8002588 <TIM_Base_SetConfig+0xac>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d108      	bne.n	8002516 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <TIM_Base_SetConfig+0xa8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d007      	beq.n	800252e <TIM_Base_SetConfig+0x52>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002524:	d003      	beq.n	800252e <TIM_Base_SetConfig+0x52>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a17      	ldr	r2, [pc, #92]	; (8002588 <TIM_Base_SetConfig+0xac>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d108      	bne.n	8002540 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <TIM_Base_SetConfig+0xa8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d103      	bne.n	8002574 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	615a      	str	r2, [r3, #20]
}
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40000400 	.word	0x40000400

0800258c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	f023 0201 	bic.w	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 030a 	bic.w	r3, r3, #10
 80025c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	621a      	str	r2, [r3, #32]
}
 80025de:	bf00      	nop
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f023 0210 	bic.w	r2, r3, #16
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002612:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	031b      	lsls	r3, r3, #12
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002624:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	621a      	str	r2, [r3, #32]
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	f043 0307 	orr.w	r3, r3, #7
 8002668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800267a:	b480      	push	{r7}
 800267c:	b087      	sub	sp, #28
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002694:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	021a      	lsls	r2, r3, #8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	431a      	orrs	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	609a      	str	r2, [r3, #8]
}
 80026ae:	bf00      	nop
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e041      	b.n	8002754 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a14      	ldr	r2, [pc, #80]	; (8002760 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d009      	beq.n	8002728 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271c:	d004      	beq.n	8002728 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a10      	ldr	r2, [pc, #64]	; (8002764 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d10c      	bne.n	8002742 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800272e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	4313      	orrs	r3, r2
 8002738:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40000400 	.word	0x40000400

08002768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <memset>:
 800278c:	4603      	mov	r3, r0
 800278e:	4402      	add	r2, r0
 8002790:	4293      	cmp	r3, r2
 8002792:	d100      	bne.n	8002796 <memset+0xa>
 8002794:	4770      	bx	lr
 8002796:	f803 1b01 	strb.w	r1, [r3], #1
 800279a:	e7f9      	b.n	8002790 <memset+0x4>

0800279c <__libc_init_array>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	2600      	movs	r6, #0
 80027a0:	4d0c      	ldr	r5, [pc, #48]	; (80027d4 <__libc_init_array+0x38>)
 80027a2:	4c0d      	ldr	r4, [pc, #52]	; (80027d8 <__libc_init_array+0x3c>)
 80027a4:	1b64      	subs	r4, r4, r5
 80027a6:	10a4      	asrs	r4, r4, #2
 80027a8:	42a6      	cmp	r6, r4
 80027aa:	d109      	bne.n	80027c0 <__libc_init_array+0x24>
 80027ac:	f000 f828 	bl	8002800 <_init>
 80027b0:	2600      	movs	r6, #0
 80027b2:	4d0a      	ldr	r5, [pc, #40]	; (80027dc <__libc_init_array+0x40>)
 80027b4:	4c0a      	ldr	r4, [pc, #40]	; (80027e0 <__libc_init_array+0x44>)
 80027b6:	1b64      	subs	r4, r4, r5
 80027b8:	10a4      	asrs	r4, r4, #2
 80027ba:	42a6      	cmp	r6, r4
 80027bc:	d105      	bne.n	80027ca <__libc_init_array+0x2e>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c4:	4798      	blx	r3
 80027c6:	3601      	adds	r6, #1
 80027c8:	e7ee      	b.n	80027a8 <__libc_init_array+0xc>
 80027ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ce:	4798      	blx	r3
 80027d0:	3601      	adds	r6, #1
 80027d2:	e7f2      	b.n	80027ba <__libc_init_array+0x1e>
 80027d4:	08004c58 	.word	0x08004c58
 80027d8:	08004c58 	.word	0x08004c58
 80027dc:	08004c58 	.word	0x08004c58
 80027e0:	08004c5c 	.word	0x08004c5c

080027e4 <memcpy>:
 80027e4:	440a      	add	r2, r1
 80027e6:	4291      	cmp	r1, r2
 80027e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80027ec:	d100      	bne.n	80027f0 <memcpy+0xc>
 80027ee:	4770      	bx	lr
 80027f0:	b510      	push	{r4, lr}
 80027f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80027f6:	4291      	cmp	r1, r2
 80027f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80027fc:	d1f9      	bne.n	80027f2 <memcpy+0xe>
 80027fe:	bd10      	pop	{r4, pc}

08002800 <_init>:
 8002800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002802:	bf00      	nop
 8002804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002806:	bc08      	pop	{r3}
 8002808:	469e      	mov	lr, r3
 800280a:	4770      	bx	lr

0800280c <_fini>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr
