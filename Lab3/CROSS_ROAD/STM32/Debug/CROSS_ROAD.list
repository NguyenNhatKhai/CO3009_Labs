
CROSS_ROAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003074  08003074  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08003074  08003074  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003074  08003074  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003078  08003078  00013078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800307c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000048  080030c4  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080030c4  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008948  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d23  00000000  00000000  000289fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002a720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000832  00000000  00000000  0002b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c45  00000000  00000000  0002ba12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c41e  00000000  00000000  00042657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000823cb  00000000  00000000  0004ea75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002abc  00000000  00000000  000d0e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d38fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	0800303c 	.word	0x0800303c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	0800303c 	.word	0x0800303c

0800014c <buttonReading>:
static GPIO_PinState debounceBuffer1[NUMBER_OF_BUTTONS];
static GPIO_PinState debounceBuffer2[NUMBER_OF_BUTTONS];
static unsigned char flagForHoldButtonBuffer[NUMBER_OF_BUTTONS];
static int counterForHoldButtonBuffer[NUMBER_OF_BUTTONS];

void buttonReading(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_OF_BUTTONS; i ++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e084      	b.n	8000262 <buttonReading+0x116>
		debounceBuffer1[i] = debounceBuffer2[i];
 8000158:	4a46      	ldr	r2, [pc, #280]	; (8000274 <buttonReading+0x128>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a45      	ldr	r2, [pc, #276]	; (8000278 <buttonReading+0x12c>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		switch (i) {
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2b03      	cmp	r3, #3
 800016e:	d83b      	bhi.n	80001e8 <buttonReading+0x9c>
 8000170:	a201      	add	r2, pc, #4	; (adr r2, 8000178 <buttonReading+0x2c>)
 8000172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000176:	bf00      	nop
 8000178:	08000189 	.word	0x08000189
 800017c:	080001a1 	.word	0x080001a1
 8000180:	080001b9 	.word	0x080001b9
 8000184:	080001d1 	.word	0x080001d1
		case 0:
			debounceBuffer2[i] = HAL_GPIO_ReadPin(BUT_0_GPIO_Port, BUT_0_Pin);
 8000188:	2101      	movs	r1, #1
 800018a:	483c      	ldr	r0, [pc, #240]	; (800027c <buttonReading+0x130>)
 800018c:	f001 ff16 	bl	8001fbc <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	4619      	mov	r1, r3
 8000194:	4a37      	ldr	r2, [pc, #220]	; (8000274 <buttonReading+0x128>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4413      	add	r3, r2
 800019a:	460a      	mov	r2, r1
 800019c:	701a      	strb	r2, [r3, #0]
			break;
 800019e:	e024      	b.n	80001ea <buttonReading+0x9e>
		case 1:
			debounceBuffer2[i] = HAL_GPIO_ReadPin(BUT_1_GPIO_Port, BUT_1_Pin);
 80001a0:	2102      	movs	r1, #2
 80001a2:	4836      	ldr	r0, [pc, #216]	; (800027c <buttonReading+0x130>)
 80001a4:	f001 ff0a 	bl	8001fbc <HAL_GPIO_ReadPin>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4619      	mov	r1, r3
 80001ac:	4a31      	ldr	r2, [pc, #196]	; (8000274 <buttonReading+0x128>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	4413      	add	r3, r2
 80001b2:	460a      	mov	r2, r1
 80001b4:	701a      	strb	r2, [r3, #0]
			break;
 80001b6:	e018      	b.n	80001ea <buttonReading+0x9e>
		case 2:
			debounceBuffer2[i] = HAL_GPIO_ReadPin(BUT_2_GPIO_Port, BUT_2_Pin);
 80001b8:	2104      	movs	r1, #4
 80001ba:	4830      	ldr	r0, [pc, #192]	; (800027c <buttonReading+0x130>)
 80001bc:	f001 fefe 	bl	8001fbc <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4619      	mov	r1, r3
 80001c4:	4a2b      	ldr	r2, [pc, #172]	; (8000274 <buttonReading+0x128>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4413      	add	r3, r2
 80001ca:	460a      	mov	r2, r1
 80001cc:	701a      	strb	r2, [r3, #0]
			break;
 80001ce:	e00c      	b.n	80001ea <buttonReading+0x9e>
		case 3:
			debounceBuffer2[i] = HAL_GPIO_ReadPin(BUT_3_GPIO_Port, BUT_3_Pin);
 80001d0:	2108      	movs	r1, #8
 80001d2:	482a      	ldr	r0, [pc, #168]	; (800027c <buttonReading+0x130>)
 80001d4:	f001 fef2 	bl	8001fbc <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	4619      	mov	r1, r3
 80001dc:	4a25      	ldr	r2, [pc, #148]	; (8000274 <buttonReading+0x128>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	460a      	mov	r2, r1
 80001e4:	701a      	strb	r2, [r3, #0]
			break;
 80001e6:	e000      	b.n	80001ea <buttonReading+0x9e>
		default:
			break;
 80001e8:	bf00      	nop
		}
		if (debounceBuffer1[i] == debounceBuffer2[i]) {
 80001ea:	4a23      	ldr	r2, [pc, #140]	; (8000278 <buttonReading+0x12c>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	4413      	add	r3, r2
 80001f0:	781a      	ldrb	r2, [r3, #0]
 80001f2:	4920      	ldr	r1, [pc, #128]	; (8000274 <buttonReading+0x128>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	440b      	add	r3, r1
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d108      	bne.n	8000210 <buttonReading+0xc4>
			buttonBuffer[i] = debounceBuffer1[i];
 80001fe:	4a1e      	ldr	r2, [pc, #120]	; (8000278 <buttonReading+0x12c>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	7819      	ldrb	r1, [r3, #0]
 8000206:	4a1e      	ldr	r2, [pc, #120]	; (8000280 <buttonReading+0x134>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	4413      	add	r3, r2
 800020c:	460a      	mov	r2, r1
 800020e:	701a      	strb	r2, [r3, #0]
		}
		if (buttonBuffer[i] == PRESS_BUTTON) {
 8000210:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <buttonReading+0x134>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4413      	add	r3, r2
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d115      	bne.n	8000248 <buttonReading+0xfc>
			if (counterForHoldButtonBuffer[i] < DURATION_FOR_AUTO_INCREASING) {
 800021c:	4a19      	ldr	r2, [pc, #100]	; (8000284 <buttonReading+0x138>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000224:	2b63      	cmp	r3, #99	; 0x63
 8000226:	dc09      	bgt.n	800023c <buttonReading+0xf0>
				counterForHoldButtonBuffer[i] ++;
 8000228:	4a16      	ldr	r2, [pc, #88]	; (8000284 <buttonReading+0x138>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000230:	1c5a      	adds	r2, r3, #1
 8000232:	4914      	ldr	r1, [pc, #80]	; (8000284 <buttonReading+0x138>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800023a:	e00f      	b.n	800025c <buttonReading+0x110>
			}
			else {
				flagForHoldButtonBuffer[i] = 1;
 800023c:	4a12      	ldr	r2, [pc, #72]	; (8000288 <buttonReading+0x13c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
 8000246:	e009      	b.n	800025c <buttonReading+0x110>
			}
		}
		else {
			counterForHoldButtonBuffer[i] = 0;
 8000248:	4a0e      	ldr	r2, [pc, #56]	; (8000284 <buttonReading+0x138>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2100      	movs	r1, #0
 800024e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			flagForHoldButtonBuffer[i] = 0;
 8000252:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <buttonReading+0x13c>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_BUTTONS; i ++) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3301      	adds	r3, #1
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b03      	cmp	r3, #3
 8000266:	f77f af77 	ble.w	8000158 <buttonReading+0xc>
		}
	}
}
 800026a:	bf00      	nop
 800026c:	bf00      	nop
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	2000006c 	.word	0x2000006c
 8000278:	20000068 	.word	0x20000068
 800027c:	40010c00 	.word	0x40010c00
 8000280:	20000064 	.word	0x20000064
 8000284:	20000074 	.word	0x20000074
 8000288:	20000070 	.word	0x20000070

0800028c <pressedButton>:

unsigned char pressedButton(int index) {
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	if (index < 0 || index >= NUMBER_OF_BUTTONS) return 0;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b00      	cmp	r3, #0
 8000298:	db02      	blt.n	80002a0 <pressedButton+0x14>
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b03      	cmp	r3, #3
 800029e:	dd01      	ble.n	80002a4 <pressedButton+0x18>
 80002a0:	2300      	movs	r3, #0
 80002a2:	e008      	b.n	80002b6 <pressedButton+0x2a>
	return (buttonBuffer[index] == PRESS_BUTTON);
 80002a4:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <pressedButton+0x34>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4413      	add	r3, r2
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bf0c      	ite	eq
 80002b0:	2301      	moveq	r3, #1
 80002b2:	2300      	movne	r3, #0
 80002b4:	b2db      	uxtb	r3, r3
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	20000064 	.word	0x20000064

080002c4 <holdingButton>:

unsigned char holdingButton(int index) {
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	if (index < 0 || index >= NUMBER_OF_BUTTONS) return 0;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db02      	blt.n	80002d8 <holdingButton+0x14>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b03      	cmp	r3, #3
 80002d6:	dd01      	ble.n	80002dc <holdingButton+0x18>
 80002d8:	2300      	movs	r3, #0
 80002da:	e008      	b.n	80002ee <holdingButton+0x2a>
	return (flagForHoldButtonBuffer[index] == 1);
 80002dc:	4a06      	ldr	r2, [pc, #24]	; (80002f8 <holdingButton+0x34>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4413      	add	r3, r2
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	bf0c      	ite	eq
 80002e8:	2301      	moveq	r3, #1
 80002ea:	2300      	movne	r3, #0
 80002ec:	b2db      	uxtb	r3, r3
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	20000070 	.word	0x20000070

080002fc <modeSelection>:
enum ButtonState {RELEASE, PRESSED, HOLDING};
enum ButtonState stateBuffer[4] = {PRESSED, PRESSED, PRESSED, PRESSED};

unsigned char mode = 0;

void modeSelection(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	switch (stateBuffer[0]) {
 8000300:	4b32      	ldr	r3, [pc, #200]	; (80003cc <modeSelection+0xd0>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <modeSelection+0x12>
 8000308:	2b01      	cmp	r3, #1
 800030a:	d04f      	beq.n	80003ac <modeSelection+0xb0>
		if (!pressedButton(0)) {
			stateBuffer[0] = RELEASE;
		}
		break;
	default:
		break;
 800030c:	e05b      	b.n	80003c6 <modeSelection+0xca>
		if (pressedButton(0)) {
 800030e:	2000      	movs	r0, #0
 8000310:	f7ff ffbc 	bl	800028c <pressedButton>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d052      	beq.n	80003c0 <modeSelection+0xc4>
			stateBuffer[0] = PRESSED;
 800031a:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <modeSelection+0xd0>)
 800031c:	2201      	movs	r2, #1
 800031e:	701a      	strb	r2, [r3, #0]
			setTimer3();
 8000320:	f001 fa2e 	bl	8001780 <setTimer3>
			resetIndexLED();
 8000324:	f000 fdac 	bl	8000e80 <resetIndexLED>
			mode ++;
 8000328:	4b29      	ldr	r3, [pc, #164]	; (80003d0 <modeSelection+0xd4>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	3301      	adds	r3, #1
 800032e:	b2da      	uxtb	r2, r3
 8000330:	4b27      	ldr	r3, [pc, #156]	; (80003d0 <modeSelection+0xd4>)
 8000332:	701a      	strb	r2, [r3, #0]
			switch (mode) {
 8000334:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <modeSelection+0xd4>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b07      	cmp	r3, #7
 800033a:	dc2c      	bgt.n	8000396 <modeSelection+0x9a>
 800033c:	2b05      	cmp	r3, #5
 800033e:	da1c      	bge.n	800037a <modeSelection+0x7e>
 8000340:	2b01      	cmp	r3, #1
 8000342:	d005      	beq.n	8000350 <modeSelection+0x54>
 8000344:	2b00      	cmp	r3, #0
 8000346:	dd26      	ble.n	8000396 <modeSelection+0x9a>
 8000348:	3b02      	subs	r3, #2
 800034a:	2b02      	cmp	r3, #2
 800034c:	d823      	bhi.n	8000396 <modeSelection+0x9a>
 800034e:	e006      	b.n	800035e <modeSelection+0x62>
				setTimer0();
 8000350:	f001 f968 	bl	8001624 <setTimer0>
				setTimer1();
 8000354:	f001 f9a0 	bl	8001698 <setTimer1>
				resetCounterBuffer();
 8000358:	f000 ff28 	bl	80011ac <resetCounterBuffer>
				break;
 800035c:	e025      	b.n	80003aa <modeSelection+0xae>
				setTimer2();
 800035e:	f001 f9d5 	bl	800170c <setTimer2>
				setDisplayValue(0, getDurationValue(mode - 2));
 8000362:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <modeSelection+0xd4>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	3b02      	subs	r3, #2
 8000368:	4618      	mov	r0, r3
 800036a:	f000 feb1 	bl	80010d0 <getDurationValue>
 800036e:	4603      	mov	r3, r0
 8000370:	4619      	mov	r1, r3
 8000372:	2000      	movs	r0, #0
 8000374:	f000 febc 	bl	80010f0 <setDisplayValue>
				break;
 8000378:	e017      	b.n	80003aa <modeSelection+0xae>
				setTimer2();
 800037a:	f001 f9c7 	bl	800170c <setTimer2>
				setDisplayValue(1, getDurationValue(mode - 2));
 800037e:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <modeSelection+0xd4>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	3b02      	subs	r3, #2
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fea3 	bl	80010d0 <getDurationValue>
 800038a:	4603      	mov	r3, r0
 800038c:	4619      	mov	r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	f000 feae 	bl	80010f0 <setDisplayValue>
				break;
 8000394:	e009      	b.n	80003aa <modeSelection+0xae>
				setTimer0();
 8000396:	f001 f945 	bl	8001624 <setTimer0>
				setTimer1();
 800039a:	f001 f97d 	bl	8001698 <setTimer1>
				resetCounterBuffer();
 800039e:	f000 ff05 	bl	80011ac <resetCounterBuffer>
				mode = 1;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <modeSelection+0xd4>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
				break;
 80003a8:	bf00      	nop
		break;
 80003aa:	e009      	b.n	80003c0 <modeSelection+0xc4>
		if (!pressedButton(0)) {
 80003ac:	2000      	movs	r0, #0
 80003ae:	f7ff ff6d 	bl	800028c <pressedButton>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d105      	bne.n	80003c4 <modeSelection+0xc8>
			stateBuffer[0] = RELEASE;
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <modeSelection+0xd0>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
		break;
 80003be:	e001      	b.n	80003c4 <modeSelection+0xc8>
		break;
 80003c0:	bf00      	nop
 80003c2:	e000      	b.n	80003c6 <modeSelection+0xca>
		break;
 80003c4:	bf00      	nop
	}
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000000 	.word	0x20000000
 80003d0:	20000084 	.word	0x20000084

080003d4 <increaseDurationValue>:

void increaseDurationValue(void) {
 80003d4:	b598      	push	{r3, r4, r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	switch (stateBuffer[1]) {
 80003d8:	4b63      	ldr	r3, [pc, #396]	; (8000568 <increaseDurationValue+0x194>)
 80003da:	785b      	ldrb	r3, [r3, #1]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d074      	beq.n	80004ca <increaseDurationValue+0xf6>
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	f300 80b6 	bgt.w	8000552 <increaseDurationValue+0x17e>
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d002      	beq.n	80003f0 <increaseDurationValue+0x1c>
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d057      	beq.n	800049e <increaseDurationValue+0xca>
				setDisplayValue((mode - 2) / 3, 0);
			}
		}
		break;
	default:
		break;
 80003ee:	e0b0      	b.n	8000552 <increaseDurationValue+0x17e>
		if (pressedButton(1)) {
 80003f0:	2001      	movs	r0, #1
 80003f2:	f7ff ff4b 	bl	800028c <pressedButton>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	f000 80ac 	beq.w	8000556 <increaseDurationValue+0x182>
			stateBuffer[1] = PRESSED;
 80003fe:	4b5a      	ldr	r3, [pc, #360]	; (8000568 <increaseDurationValue+0x194>)
 8000400:	2201      	movs	r2, #1
 8000402:	705a      	strb	r2, [r3, #1]
			if (mode != 2 && mode != 3 && mode != 4 &&
 8000404:	4b59      	ldr	r3, [pc, #356]	; (800056c <increaseDurationValue+0x198>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b02      	cmp	r3, #2
 800040a:	d014      	beq.n	8000436 <increaseDurationValue+0x62>
 800040c:	4b57      	ldr	r3, [pc, #348]	; (800056c <increaseDurationValue+0x198>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b03      	cmp	r3, #3
 8000412:	d010      	beq.n	8000436 <increaseDurationValue+0x62>
 8000414:	4b55      	ldr	r3, [pc, #340]	; (800056c <increaseDurationValue+0x198>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b04      	cmp	r3, #4
 800041a:	d00c      	beq.n	8000436 <increaseDurationValue+0x62>
					mode != 5 && mode != 6 && mode != 7) break;
 800041c:	4b53      	ldr	r3, [pc, #332]	; (800056c <increaseDurationValue+0x198>)
 800041e:	781b      	ldrb	r3, [r3, #0]
			if (mode != 2 && mode != 3 && mode != 4 &&
 8000420:	2b05      	cmp	r3, #5
 8000422:	d008      	beq.n	8000436 <increaseDurationValue+0x62>
					mode != 5 && mode != 6 && mode != 7) break;
 8000424:	4b51      	ldr	r3, [pc, #324]	; (800056c <increaseDurationValue+0x198>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b06      	cmp	r3, #6
 800042a:	d004      	beq.n	8000436 <increaseDurationValue+0x62>
 800042c:	4b4f      	ldr	r3, [pc, #316]	; (800056c <increaseDurationValue+0x198>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b07      	cmp	r3, #7
 8000432:	f040 8092 	bne.w	800055a <increaseDurationValue+0x186>
			setDisplayValue((mode - 2) / 3, getDisplayValue((mode - 2) / 3) + 1);
 8000436:	4b4d      	ldr	r3, [pc, #308]	; (800056c <increaseDurationValue+0x198>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	3b02      	subs	r3, #2
 800043c:	4a4c      	ldr	r2, [pc, #304]	; (8000570 <increaseDurationValue+0x19c>)
 800043e:	fb82 1203 	smull	r1, r2, r2, r3
 8000442:	17db      	asrs	r3, r3, #31
 8000444:	1ad4      	subs	r4, r2, r3
 8000446:	4b49      	ldr	r3, [pc, #292]	; (800056c <increaseDurationValue+0x198>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	3b02      	subs	r3, #2
 800044c:	4a48      	ldr	r2, [pc, #288]	; (8000570 <increaseDurationValue+0x19c>)
 800044e:	fb82 1203 	smull	r1, r2, r2, r3
 8000452:	17db      	asrs	r3, r3, #31
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fe5c 	bl	8001114 <getDisplayValue>
 800045c:	4603      	mov	r3, r0
 800045e:	3301      	adds	r3, #1
 8000460:	4619      	mov	r1, r3
 8000462:	4620      	mov	r0, r4
 8000464:	f000 fe44 	bl	80010f0 <setDisplayValue>
			if (getDisplayValue((mode - 2) / 3) > 99) {
 8000468:	4b40      	ldr	r3, [pc, #256]	; (800056c <increaseDurationValue+0x198>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	3b02      	subs	r3, #2
 800046e:	4a40      	ldr	r2, [pc, #256]	; (8000570 <increaseDurationValue+0x19c>)
 8000470:	fb82 1203 	smull	r1, r2, r2, r3
 8000474:	17db      	asrs	r3, r3, #31
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fe4b 	bl	8001114 <getDisplayValue>
 800047e:	4603      	mov	r3, r0
 8000480:	2b63      	cmp	r3, #99	; 0x63
 8000482:	dd68      	ble.n	8000556 <increaseDurationValue+0x182>
				setDisplayValue((mode - 2) / 3, 0);
 8000484:	4b39      	ldr	r3, [pc, #228]	; (800056c <increaseDurationValue+0x198>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	3b02      	subs	r3, #2
 800048a:	4a39      	ldr	r2, [pc, #228]	; (8000570 <increaseDurationValue+0x19c>)
 800048c:	fb82 1203 	smull	r1, r2, r2, r3
 8000490:	17db      	asrs	r3, r3, #31
 8000492:	1ad3      	subs	r3, r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f000 fe2a 	bl	80010f0 <setDisplayValue>
		break;
 800049c:	e05b      	b.n	8000556 <increaseDurationValue+0x182>
		if (!pressedButton(1)) {
 800049e:	2001      	movs	r0, #1
 80004a0:	f7ff fef4 	bl	800028c <pressedButton>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d103      	bne.n	80004b2 <increaseDurationValue+0xde>
			stateBuffer[1] = RELEASE;
 80004aa:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <increaseDurationValue+0x194>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	705a      	strb	r2, [r3, #1]
		break;
 80004b0:	e055      	b.n	800055e <increaseDurationValue+0x18a>
		else if (holdingButton(1)) {
 80004b2:	2001      	movs	r0, #1
 80004b4:	f7ff ff06 	bl	80002c4 <holdingButton>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d04f      	beq.n	800055e <increaseDurationValue+0x18a>
			stateBuffer[1] = HOLDING;
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <increaseDurationValue+0x194>)
 80004c0:	2202      	movs	r2, #2
 80004c2:	705a      	strb	r2, [r3, #1]
			setTimer4();
 80004c4:	f001 f996 	bl	80017f4 <setTimer4>
		break;
 80004c8:	e049      	b.n	800055e <increaseDurationValue+0x18a>
		if (!pressedButton(1)) {
 80004ca:	2001      	movs	r0, #1
 80004cc:	f7ff fede 	bl	800028c <pressedButton>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d102      	bne.n	80004dc <increaseDurationValue+0x108>
			stateBuffer[1] = RELEASE;
 80004d6:	4b24      	ldr	r3, [pc, #144]	; (8000568 <increaseDurationValue+0x194>)
 80004d8:	2200      	movs	r2, #0
 80004da:	705a      	strb	r2, [r3, #1]
		if (finishedTimer4()) {
 80004dc:	f001 f9b4 	bl	8001848 <finishedTimer4>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d03d      	beq.n	8000562 <increaseDurationValue+0x18e>
			setTimer4();
 80004e6:	f001 f985 	bl	80017f4 <setTimer4>
			setDisplayValue((mode - 2) / 3, getDisplayValue((mode - 2) / 3) + 1);
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <increaseDurationValue+0x198>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <increaseDurationValue+0x19c>)
 80004f2:	fb82 1203 	smull	r1, r2, r2, r3
 80004f6:	17db      	asrs	r3, r3, #31
 80004f8:	1ad4      	subs	r4, r2, r3
 80004fa:	4b1c      	ldr	r3, [pc, #112]	; (800056c <increaseDurationValue+0x198>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	3b02      	subs	r3, #2
 8000500:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <increaseDurationValue+0x19c>)
 8000502:	fb82 1203 	smull	r1, r2, r2, r3
 8000506:	17db      	asrs	r3, r3, #31
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fe02 	bl	8001114 <getDisplayValue>
 8000510:	4603      	mov	r3, r0
 8000512:	3301      	adds	r3, #1
 8000514:	4619      	mov	r1, r3
 8000516:	4620      	mov	r0, r4
 8000518:	f000 fdea 	bl	80010f0 <setDisplayValue>
			if (getDisplayValue((mode - 2) / 3) > 99) {
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <increaseDurationValue+0x198>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	3b02      	subs	r3, #2
 8000522:	4a13      	ldr	r2, [pc, #76]	; (8000570 <increaseDurationValue+0x19c>)
 8000524:	fb82 1203 	smull	r1, r2, r2, r3
 8000528:	17db      	asrs	r3, r3, #31
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fdf1 	bl	8001114 <getDisplayValue>
 8000532:	4603      	mov	r3, r0
 8000534:	2b63      	cmp	r3, #99	; 0x63
 8000536:	dd14      	ble.n	8000562 <increaseDurationValue+0x18e>
				setDisplayValue((mode - 2) / 3, 0);
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <increaseDurationValue+0x198>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3b02      	subs	r3, #2
 800053e:	4a0c      	ldr	r2, [pc, #48]	; (8000570 <increaseDurationValue+0x19c>)
 8000540:	fb82 1203 	smull	r1, r2, r2, r3
 8000544:	17db      	asrs	r3, r3, #31
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fdd0 	bl	80010f0 <setDisplayValue>
		break;
 8000550:	e007      	b.n	8000562 <increaseDurationValue+0x18e>
		break;
 8000552:	bf00      	nop
 8000554:	e006      	b.n	8000564 <increaseDurationValue+0x190>
		break;
 8000556:	bf00      	nop
 8000558:	e004      	b.n	8000564 <increaseDurationValue+0x190>
					mode != 5 && mode != 6 && mode != 7) break;
 800055a:	bf00      	nop
 800055c:	e002      	b.n	8000564 <increaseDurationValue+0x190>
		break;
 800055e:	bf00      	nop
 8000560:	e000      	b.n	8000564 <increaseDurationValue+0x190>
		break;
 8000562:	bf00      	nop
	}
}
 8000564:	bf00      	nop
 8000566:	bd98      	pop	{r3, r4, r7, pc}
 8000568:	20000000 	.word	0x20000000
 800056c:	20000084 	.word	0x20000084
 8000570:	55555556 	.word	0x55555556

08000574 <decreaseDurationValue>:

void decreaseDurationValue(void) {
 8000574:	b598      	push	{r3, r4, r7, lr}
 8000576:	af00      	add	r7, sp, #0
	switch (stateBuffer[2]) {
 8000578:	4b63      	ldr	r3, [pc, #396]	; (8000708 <decreaseDurationValue+0x194>)
 800057a:	789b      	ldrb	r3, [r3, #2]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d074      	beq.n	800066a <decreaseDurationValue+0xf6>
 8000580:	2b02      	cmp	r3, #2
 8000582:	f300 80b6 	bgt.w	80006f2 <decreaseDurationValue+0x17e>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d002      	beq.n	8000590 <decreaseDurationValue+0x1c>
 800058a:	2b01      	cmp	r3, #1
 800058c:	d057      	beq.n	800063e <decreaseDurationValue+0xca>
				setDisplayValue((mode - 2) / 3, 99);
			}
		}
		break;
	default:
		break;
 800058e:	e0b0      	b.n	80006f2 <decreaseDurationValue+0x17e>
		if (pressedButton(2)) {
 8000590:	2002      	movs	r0, #2
 8000592:	f7ff fe7b 	bl	800028c <pressedButton>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	f000 80ac 	beq.w	80006f6 <decreaseDurationValue+0x182>
			stateBuffer[2] = PRESSED;
 800059e:	4b5a      	ldr	r3, [pc, #360]	; (8000708 <decreaseDurationValue+0x194>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	709a      	strb	r2, [r3, #2]
			if (mode != 2 && mode != 3 && mode != 4 &&
 80005a4:	4b59      	ldr	r3, [pc, #356]	; (800070c <decreaseDurationValue+0x198>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d014      	beq.n	80005d6 <decreaseDurationValue+0x62>
 80005ac:	4b57      	ldr	r3, [pc, #348]	; (800070c <decreaseDurationValue+0x198>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d010      	beq.n	80005d6 <decreaseDurationValue+0x62>
 80005b4:	4b55      	ldr	r3, [pc, #340]	; (800070c <decreaseDurationValue+0x198>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d00c      	beq.n	80005d6 <decreaseDurationValue+0x62>
					mode != 5 && mode != 6 && mode != 7) break;
 80005bc:	4b53      	ldr	r3, [pc, #332]	; (800070c <decreaseDurationValue+0x198>)
 80005be:	781b      	ldrb	r3, [r3, #0]
			if (mode != 2 && mode != 3 && mode != 4 &&
 80005c0:	2b05      	cmp	r3, #5
 80005c2:	d008      	beq.n	80005d6 <decreaseDurationValue+0x62>
					mode != 5 && mode != 6 && mode != 7) break;
 80005c4:	4b51      	ldr	r3, [pc, #324]	; (800070c <decreaseDurationValue+0x198>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b06      	cmp	r3, #6
 80005ca:	d004      	beq.n	80005d6 <decreaseDurationValue+0x62>
 80005cc:	4b4f      	ldr	r3, [pc, #316]	; (800070c <decreaseDurationValue+0x198>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b07      	cmp	r3, #7
 80005d2:	f040 8092 	bne.w	80006fa <decreaseDurationValue+0x186>
			setDisplayValue((mode - 2) / 3, getDisplayValue((mode - 2) / 3) - 1);
 80005d6:	4b4d      	ldr	r3, [pc, #308]	; (800070c <decreaseDurationValue+0x198>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	3b02      	subs	r3, #2
 80005dc:	4a4c      	ldr	r2, [pc, #304]	; (8000710 <decreaseDurationValue+0x19c>)
 80005de:	fb82 1203 	smull	r1, r2, r2, r3
 80005e2:	17db      	asrs	r3, r3, #31
 80005e4:	1ad4      	subs	r4, r2, r3
 80005e6:	4b49      	ldr	r3, [pc, #292]	; (800070c <decreaseDurationValue+0x198>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	3b02      	subs	r3, #2
 80005ec:	4a48      	ldr	r2, [pc, #288]	; (8000710 <decreaseDurationValue+0x19c>)
 80005ee:	fb82 1203 	smull	r1, r2, r2, r3
 80005f2:	17db      	asrs	r3, r3, #31
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fd8c 	bl	8001114 <getDisplayValue>
 80005fc:	4603      	mov	r3, r0
 80005fe:	3b01      	subs	r3, #1
 8000600:	4619      	mov	r1, r3
 8000602:	4620      	mov	r0, r4
 8000604:	f000 fd74 	bl	80010f0 <setDisplayValue>
			if (getDisplayValue((mode - 2) / 3) < 0) {
 8000608:	4b40      	ldr	r3, [pc, #256]	; (800070c <decreaseDurationValue+0x198>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	3b02      	subs	r3, #2
 800060e:	4a40      	ldr	r2, [pc, #256]	; (8000710 <decreaseDurationValue+0x19c>)
 8000610:	fb82 1203 	smull	r1, r2, r2, r3
 8000614:	17db      	asrs	r3, r3, #31
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fd7b 	bl	8001114 <getDisplayValue>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	da68      	bge.n	80006f6 <decreaseDurationValue+0x182>
				setDisplayValue((mode - 2) / 3, 99);
 8000624:	4b39      	ldr	r3, [pc, #228]	; (800070c <decreaseDurationValue+0x198>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	3b02      	subs	r3, #2
 800062a:	4a39      	ldr	r2, [pc, #228]	; (8000710 <decreaseDurationValue+0x19c>)
 800062c:	fb82 1203 	smull	r1, r2, r2, r3
 8000630:	17db      	asrs	r3, r3, #31
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	2163      	movs	r1, #99	; 0x63
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fd5a 	bl	80010f0 <setDisplayValue>
		break;
 800063c:	e05b      	b.n	80006f6 <decreaseDurationValue+0x182>
		if (!pressedButton(2)) {
 800063e:	2002      	movs	r0, #2
 8000640:	f7ff fe24 	bl	800028c <pressedButton>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d103      	bne.n	8000652 <decreaseDurationValue+0xde>
			stateBuffer[2] = RELEASE;
 800064a:	4b2f      	ldr	r3, [pc, #188]	; (8000708 <decreaseDurationValue+0x194>)
 800064c:	2200      	movs	r2, #0
 800064e:	709a      	strb	r2, [r3, #2]
		break;
 8000650:	e055      	b.n	80006fe <decreaseDurationValue+0x18a>
		else if (holdingButton(2)) {
 8000652:	2002      	movs	r0, #2
 8000654:	f7ff fe36 	bl	80002c4 <holdingButton>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d04f      	beq.n	80006fe <decreaseDurationValue+0x18a>
			stateBuffer[2] = HOLDING;
 800065e:	4b2a      	ldr	r3, [pc, #168]	; (8000708 <decreaseDurationValue+0x194>)
 8000660:	2202      	movs	r2, #2
 8000662:	709a      	strb	r2, [r3, #2]
			setTimer4();
 8000664:	f001 f8c6 	bl	80017f4 <setTimer4>
		break;
 8000668:	e049      	b.n	80006fe <decreaseDurationValue+0x18a>
		if (!pressedButton(2)) {
 800066a:	2002      	movs	r0, #2
 800066c:	f7ff fe0e 	bl	800028c <pressedButton>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d102      	bne.n	800067c <decreaseDurationValue+0x108>
			stateBuffer[2] = RELEASE;
 8000676:	4b24      	ldr	r3, [pc, #144]	; (8000708 <decreaseDurationValue+0x194>)
 8000678:	2200      	movs	r2, #0
 800067a:	709a      	strb	r2, [r3, #2]
		if (finishedTimer4()) {
 800067c:	f001 f8e4 	bl	8001848 <finishedTimer4>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d03d      	beq.n	8000702 <decreaseDurationValue+0x18e>
			setTimer4();
 8000686:	f001 f8b5 	bl	80017f4 <setTimer4>
			setDisplayValue((mode - 2) / 3, getDisplayValue((mode - 2) / 3) - 1);
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <decreaseDurationValue+0x198>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	3b02      	subs	r3, #2
 8000690:	4a1f      	ldr	r2, [pc, #124]	; (8000710 <decreaseDurationValue+0x19c>)
 8000692:	fb82 1203 	smull	r1, r2, r2, r3
 8000696:	17db      	asrs	r3, r3, #31
 8000698:	1ad4      	subs	r4, r2, r3
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <decreaseDurationValue+0x198>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	3b02      	subs	r3, #2
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <decreaseDurationValue+0x19c>)
 80006a2:	fb82 1203 	smull	r1, r2, r2, r3
 80006a6:	17db      	asrs	r3, r3, #31
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fd32 	bl	8001114 <getDisplayValue>
 80006b0:	4603      	mov	r3, r0
 80006b2:	3b01      	subs	r3, #1
 80006b4:	4619      	mov	r1, r3
 80006b6:	4620      	mov	r0, r4
 80006b8:	f000 fd1a 	bl	80010f0 <setDisplayValue>
			if (getDisplayValue((mode - 2) / 3) < 0) {
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <decreaseDurationValue+0x198>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	3b02      	subs	r3, #2
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <decreaseDurationValue+0x19c>)
 80006c4:	fb82 1203 	smull	r1, r2, r2, r3
 80006c8:	17db      	asrs	r3, r3, #31
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fd21 	bl	8001114 <getDisplayValue>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	da14      	bge.n	8000702 <decreaseDurationValue+0x18e>
				setDisplayValue((mode - 2) / 3, 99);
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <decreaseDurationValue+0x198>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	3b02      	subs	r3, #2
 80006de:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <decreaseDurationValue+0x19c>)
 80006e0:	fb82 1203 	smull	r1, r2, r2, r3
 80006e4:	17db      	asrs	r3, r3, #31
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	2163      	movs	r1, #99	; 0x63
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fd00 	bl	80010f0 <setDisplayValue>
		break;
 80006f0:	e007      	b.n	8000702 <decreaseDurationValue+0x18e>
		break;
 80006f2:	bf00      	nop
 80006f4:	e006      	b.n	8000704 <decreaseDurationValue+0x190>
		break;
 80006f6:	bf00      	nop
 80006f8:	e004      	b.n	8000704 <decreaseDurationValue+0x190>
					mode != 5 && mode != 6 && mode != 7) break;
 80006fa:	bf00      	nop
 80006fc:	e002      	b.n	8000704 <decreaseDurationValue+0x190>
		break;
 80006fe:	bf00      	nop
 8000700:	e000      	b.n	8000704 <decreaseDurationValue+0x190>
		break;
 8000702:	bf00      	nop
	}
}
 8000704:	bf00      	nop
 8000706:	bd98      	pop	{r3, r4, r7, pc}
 8000708:	20000000 	.word	0x20000000
 800070c:	20000084 	.word	0x20000084
 8000710:	55555556 	.word	0x55555556

08000714 <setupDurationValue>:

void setupDurationValue(void) {
 8000714:	b598      	push	{r3, r4, r7, lr}
 8000716:	af00      	add	r7, sp, #0
	switch (stateBuffer[3]) {
 8000718:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <setupDurationValue+0xb4>)
 800071a:	78db      	ldrb	r3, [r3, #3]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <setupDurationValue+0x12>
 8000720:	2b01      	cmp	r3, #1
 8000722:	d03a      	beq.n	800079a <setupDurationValue+0x86>
			stateBuffer[3] = RELEASE;
			HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
		}
		break;
	default:
		break;
 8000724:	e04d      	b.n	80007c2 <setupDurationValue+0xae>
		if (pressedButton(3)) {
 8000726:	2003      	movs	r0, #3
 8000728:	f7ff fdb0 	bl	800028c <pressedButton>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d042      	beq.n	80007b8 <setupDurationValue+0xa4>
			stateBuffer[3] = PRESSED;
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <setupDurationValue+0xb4>)
 8000734:	2201      	movs	r2, #1
 8000736:	70da      	strb	r2, [r3, #3]
			if (mode != 2 && mode != 3 && mode != 4 &&
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <setupDurationValue+0xb8>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b02      	cmp	r3, #2
 800073e:	d013      	beq.n	8000768 <setupDurationValue+0x54>
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <setupDurationValue+0xb8>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d00f      	beq.n	8000768 <setupDurationValue+0x54>
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <setupDurationValue+0xb8>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b04      	cmp	r3, #4
 800074e:	d00b      	beq.n	8000768 <setupDurationValue+0x54>
					mode != 5 && mode != 6 && mode != 7) break;
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <setupDurationValue+0xb8>)
 8000752:	781b      	ldrb	r3, [r3, #0]
			if (mode != 2 && mode != 3 && mode != 4 &&
 8000754:	2b05      	cmp	r3, #5
 8000756:	d007      	beq.n	8000768 <setupDurationValue+0x54>
					mode != 5 && mode != 6 && mode != 7) break;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <setupDurationValue+0xb8>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b06      	cmp	r3, #6
 800075e:	d003      	beq.n	8000768 <setupDurationValue+0x54>
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <setupDurationValue+0xb8>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b07      	cmp	r3, #7
 8000766:	d129      	bne.n	80007bc <setupDurationValue+0xa8>
			setDurationValue(mode - 2, getDisplayValue((mode - 2) / 3));
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <setupDurationValue+0xb8>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	1e9c      	subs	r4, r3, #2
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <setupDurationValue+0xb8>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	3b02      	subs	r3, #2
 8000774:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <setupDurationValue+0xbc>)
 8000776:	fb82 1203 	smull	r1, r2, r2, r3
 800077a:	17db      	asrs	r3, r3, #31
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fcc8 	bl	8001114 <getDisplayValue>
 8000784:	4603      	mov	r3, r0
 8000786:	4619      	mov	r1, r3
 8000788:	4620      	mov	r0, r4
 800078a:	f000 fc8f 	bl	80010ac <setDurationValue>
			HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <setupDurationValue+0xc0>)
 8000794:	f001 fc29 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000798:	e00e      	b.n	80007b8 <setupDurationValue+0xa4>
		if (!pressedButton(3)) {
 800079a:	2003      	movs	r0, #3
 800079c:	f7ff fd76 	bl	800028c <pressedButton>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d10c      	bne.n	80007c0 <setupDurationValue+0xac>
			stateBuffer[3] = RELEASE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <setupDurationValue+0xb4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <setupDurationValue+0xc0>)
 80007b2:	f001 fc1a 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 80007b6:	e003      	b.n	80007c0 <setupDurationValue+0xac>
		break;
 80007b8:	bf00      	nop
 80007ba:	e002      	b.n	80007c2 <setupDurationValue+0xae>
					mode != 5 && mode != 6 && mode != 7) break;
 80007bc:	bf00      	nop
 80007be:	e000      	b.n	80007c2 <setupDurationValue+0xae>
		break;
 80007c0:	bf00      	nop
	}
}
 80007c2:	bf00      	nop
 80007c4:	bd98      	pop	{r3, r4, r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000084 	.word	0x20000084
 80007d0:	55555556 	.word	0x55555556
 80007d4:	40010800 	.word	0x40010800

080007d8 <getMode>:

unsigned char getMode(void) {
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
	return mode;
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <getMode+0x10>)
 80007de:	781b      	ldrb	r3, [r3, #0]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	20000084 	.word	0x20000084

080007ec <displayNumber>:
#include "input_processing.h"
#include "led_display.h"
#include "mode_control.h"
#include "software_timer.h"

void displayNumber(int num) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	switch (num) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b09      	cmp	r3, #9
 80007f8:	f200 81c8 	bhi.w	8000b8c <displayNumber+0x3a0>
 80007fc:	a201      	add	r2, pc, #4	; (adr r2, 8000804 <displayNumber+0x18>)
 80007fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000802:	bf00      	nop
 8000804:	0800082d 	.word	0x0800082d
 8000808:	08000883 	.word	0x08000883
 800080c:	080008d9 	.word	0x080008d9
 8000810:	0800092f 	.word	0x0800092f
 8000814:	08000985 	.word	0x08000985
 8000818:	080009db 	.word	0x080009db
 800081c:	08000a31 	.word	0x08000a31
 8000820:	08000a87 	.word	0x08000a87
 8000824:	08000add 	.word	0x08000add
 8000828:	08000b33 	.word	0x08000b33
	case 0:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000832:	48d5      	ldr	r0, [pc, #852]	; (8000b88 <displayNumber+0x39c>)
 8000834:	f001 fbd9 	bl	8001fea <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083e:	48d2      	ldr	r0, [pc, #840]	; (8000b88 <displayNumber+0x39c>)
 8000840:	f001 fbd3 	bl	8001fea <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084a:	48cf      	ldr	r0, [pc, #828]	; (8000b88 <displayNumber+0x39c>)
 800084c:	f001 fbcd 	bl	8001fea <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000856:	48cc      	ldr	r0, [pc, #816]	; (8000b88 <displayNumber+0x39c>)
 8000858:	f001 fbc7 	bl	8001fea <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	48c9      	ldr	r0, [pc, #804]	; (8000b88 <displayNumber+0x39c>)
 8000864:	f001 fbc1 	bl	8001fea <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800086e:	48c6      	ldr	r0, [pc, #792]	; (8000b88 <displayNumber+0x39c>)
 8000870:	f001 fbbb 	bl	8001fea <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087a:	48c3      	ldr	r0, [pc, #780]	; (8000b88 <displayNumber+0x39c>)
 800087c:	f001 fbb5 	bl	8001fea <HAL_GPIO_WritePin>
	 	break;
 8000880:	e1af      	b.n	8000be2 <displayNumber+0x3f6>
	case 1:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	48bf      	ldr	r0, [pc, #764]	; (8000b88 <displayNumber+0x39c>)
 800088a:	f001 fbae 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000894:	48bc      	ldr	r0, [pc, #752]	; (8000b88 <displayNumber+0x39c>)
 8000896:	f001 fba8 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a0:	48b9      	ldr	r0, [pc, #740]	; (8000b88 <displayNumber+0x39c>)
 80008a2:	f001 fba2 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ac:	48b6      	ldr	r0, [pc, #728]	; (8000b88 <displayNumber+0x39c>)
 80008ae:	f001 fb9c 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b8:	48b3      	ldr	r0, [pc, #716]	; (8000b88 <displayNumber+0x39c>)
 80008ba:	f001 fb96 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c4:	48b0      	ldr	r0, [pc, #704]	; (8000b88 <displayNumber+0x39c>)
 80008c6:	f001 fb90 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d0:	48ad      	ldr	r0, [pc, #692]	; (8000b88 <displayNumber+0x39c>)
 80008d2:	f001 fb8a 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 80008d6:	e184      	b.n	8000be2 <displayNumber+0x3f6>
	case 2:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008de:	48aa      	ldr	r0, [pc, #680]	; (8000b88 <displayNumber+0x39c>)
 80008e0:	f001 fb83 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ea:	48a7      	ldr	r0, [pc, #668]	; (8000b88 <displayNumber+0x39c>)
 80008ec:	f001 fb7d 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f6:	48a4      	ldr	r0, [pc, #656]	; (8000b88 <displayNumber+0x39c>)
 80008f8:	f001 fb77 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000902:	48a1      	ldr	r0, [pc, #644]	; (8000b88 <displayNumber+0x39c>)
 8000904:	f001 fb71 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090e:	489e      	ldr	r0, [pc, #632]	; (8000b88 <displayNumber+0x39c>)
 8000910:	f001 fb6b 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091a:	489b      	ldr	r0, [pc, #620]	; (8000b88 <displayNumber+0x39c>)
 800091c:	f001 fb65 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000926:	4898      	ldr	r0, [pc, #608]	; (8000b88 <displayNumber+0x39c>)
 8000928:	f001 fb5f 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 800092c:	e159      	b.n	8000be2 <displayNumber+0x3f6>
	case 3:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000934:	4894      	ldr	r0, [pc, #592]	; (8000b88 <displayNumber+0x39c>)
 8000936:	f001 fb58 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000940:	4891      	ldr	r0, [pc, #580]	; (8000b88 <displayNumber+0x39c>)
 8000942:	f001 fb52 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800094c:	488e      	ldr	r0, [pc, #568]	; (8000b88 <displayNumber+0x39c>)
 800094e:	f001 fb4c 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000958:	488b      	ldr	r0, [pc, #556]	; (8000b88 <displayNumber+0x39c>)
 800095a:	f001 fb46 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000964:	4888      	ldr	r0, [pc, #544]	; (8000b88 <displayNumber+0x39c>)
 8000966:	f001 fb40 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000970:	4885      	ldr	r0, [pc, #532]	; (8000b88 <displayNumber+0x39c>)
 8000972:	f001 fb3a 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097c:	4882      	ldr	r0, [pc, #520]	; (8000b88 <displayNumber+0x39c>)
 800097e:	f001 fb34 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000982:	e12e      	b.n	8000be2 <displayNumber+0x3f6>
	case 4:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098a:	487f      	ldr	r0, [pc, #508]	; (8000b88 <displayNumber+0x39c>)
 800098c:	f001 fb2d 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000996:	487c      	ldr	r0, [pc, #496]	; (8000b88 <displayNumber+0x39c>)
 8000998:	f001 fb27 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a2:	4879      	ldr	r0, [pc, #484]	; (8000b88 <displayNumber+0x39c>)
 80009a4:	f001 fb21 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ae:	4876      	ldr	r0, [pc, #472]	; (8000b88 <displayNumber+0x39c>)
 80009b0:	f001 fb1b 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ba:	4873      	ldr	r0, [pc, #460]	; (8000b88 <displayNumber+0x39c>)
 80009bc:	f001 fb15 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c6:	4870      	ldr	r0, [pc, #448]	; (8000b88 <displayNumber+0x39c>)
 80009c8:	f001 fb0f 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d2:	486d      	ldr	r0, [pc, #436]	; (8000b88 <displayNumber+0x39c>)
 80009d4:	f001 fb09 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 80009d8:	e103      	b.n	8000be2 <displayNumber+0x3f6>
	case 5:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e0:	4869      	ldr	r0, [pc, #420]	; (8000b88 <displayNumber+0x39c>)
 80009e2:	f001 fb02 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ec:	4866      	ldr	r0, [pc, #408]	; (8000b88 <displayNumber+0x39c>)
 80009ee:	f001 fafc 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f8:	4863      	ldr	r0, [pc, #396]	; (8000b88 <displayNumber+0x39c>)
 80009fa:	f001 faf6 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a04:	4860      	ldr	r0, [pc, #384]	; (8000b88 <displayNumber+0x39c>)
 8000a06:	f001 faf0 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a10:	485d      	ldr	r0, [pc, #372]	; (8000b88 <displayNumber+0x39c>)
 8000a12:	f001 faea 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1c:	485a      	ldr	r0, [pc, #360]	; (8000b88 <displayNumber+0x39c>)
 8000a1e:	f001 fae4 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a28:	4857      	ldr	r0, [pc, #348]	; (8000b88 <displayNumber+0x39c>)
 8000a2a:	f001 fade 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000a2e:	e0d8      	b.n	8000be2 <displayNumber+0x3f6>
	case 6:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	4854      	ldr	r0, [pc, #336]	; (8000b88 <displayNumber+0x39c>)
 8000a38:	f001 fad7 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a42:	4851      	ldr	r0, [pc, #324]	; (8000b88 <displayNumber+0x39c>)
 8000a44:	f001 fad1 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a4e:	484e      	ldr	r0, [pc, #312]	; (8000b88 <displayNumber+0x39c>)
 8000a50:	f001 facb 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5a:	484b      	ldr	r0, [pc, #300]	; (8000b88 <displayNumber+0x39c>)
 8000a5c:	f001 fac5 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	4848      	ldr	r0, [pc, #288]	; (8000b88 <displayNumber+0x39c>)
 8000a68:	f001 fabf 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a72:	4845      	ldr	r0, [pc, #276]	; (8000b88 <displayNumber+0x39c>)
 8000a74:	f001 fab9 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7e:	4842      	ldr	r0, [pc, #264]	; (8000b88 <displayNumber+0x39c>)
 8000a80:	f001 fab3 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000a84:	e0ad      	b.n	8000be2 <displayNumber+0x3f6>
	case 7:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8c:	483e      	ldr	r0, [pc, #248]	; (8000b88 <displayNumber+0x39c>)
 8000a8e:	f001 faac 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a98:	483b      	ldr	r0, [pc, #236]	; (8000b88 <displayNumber+0x39c>)
 8000a9a:	f001 faa6 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa4:	4838      	ldr	r0, [pc, #224]	; (8000b88 <displayNumber+0x39c>)
 8000aa6:	f001 faa0 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab0:	4835      	ldr	r0, [pc, #212]	; (8000b88 <displayNumber+0x39c>)
 8000ab2:	f001 fa9a 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000abc:	4832      	ldr	r0, [pc, #200]	; (8000b88 <displayNumber+0x39c>)
 8000abe:	f001 fa94 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac8:	482f      	ldr	r0, [pc, #188]	; (8000b88 <displayNumber+0x39c>)
 8000aca:	f001 fa8e 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad4:	482c      	ldr	r0, [pc, #176]	; (8000b88 <displayNumber+0x39c>)
 8000ad6:	f001 fa88 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000ada:	e082      	b.n	8000be2 <displayNumber+0x3f6>
	case 8:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae2:	4829      	ldr	r0, [pc, #164]	; (8000b88 <displayNumber+0x39c>)
 8000ae4:	f001 fa81 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aee:	4826      	ldr	r0, [pc, #152]	; (8000b88 <displayNumber+0x39c>)
 8000af0:	f001 fa7b 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afa:	4823      	ldr	r0, [pc, #140]	; (8000b88 <displayNumber+0x39c>)
 8000afc:	f001 fa75 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b06:	4820      	ldr	r0, [pc, #128]	; (8000b88 <displayNumber+0x39c>)
 8000b08:	f001 fa6f 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	481d      	ldr	r0, [pc, #116]	; (8000b88 <displayNumber+0x39c>)
 8000b14:	f001 fa69 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b1e:	481a      	ldr	r0, [pc, #104]	; (8000b88 <displayNumber+0x39c>)
 8000b20:	f001 fa63 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2a:	4817      	ldr	r0, [pc, #92]	; (8000b88 <displayNumber+0x39c>)
 8000b2c:	f001 fa5d 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000b30:	e057      	b.n	8000be2 <displayNumber+0x3f6>
	case 9:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <displayNumber+0x39c>)
 8000b3a:	f001 fa56 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b44:	4810      	ldr	r0, [pc, #64]	; (8000b88 <displayNumber+0x39c>)
 8000b46:	f001 fa50 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <displayNumber+0x39c>)
 8000b52:	f001 fa4a 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <displayNumber+0x39c>)
 8000b5e:	f001 fa44 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b68:	4807      	ldr	r0, [pc, #28]	; (8000b88 <displayNumber+0x39c>)
 8000b6a:	f001 fa3e 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <displayNumber+0x39c>)
 8000b76:	f001 fa38 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b80:	4801      	ldr	r0, [pc, #4]	; (8000b88 <displayNumber+0x39c>)
 8000b82:	f001 fa32 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000b86:	e02c      	b.n	8000be2 <displayNumber+0x3f6>
 8000b88:	40010800 	.word	0x40010800
	default:
		HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b92:	4816      	ldr	r0, [pc, #88]	; (8000bec <displayNumber+0x400>)
 8000b94:	f001 fa29 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9e:	4813      	ldr	r0, [pc, #76]	; (8000bec <displayNumber+0x400>)
 8000ba0:	f001 fa23 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000baa:	4810      	ldr	r0, [pc, #64]	; (8000bec <displayNumber+0x400>)
 8000bac:	f001 fa1d 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <displayNumber+0x400>)
 8000bb8:	f001 fa17 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc2:	480a      	ldr	r0, [pc, #40]	; (8000bec <displayNumber+0x400>)
 8000bc4:	f001 fa11 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <displayNumber+0x400>)
 8000bd0:	f001 fa0b 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bda:	4804      	ldr	r0, [pc, #16]	; (8000bec <displayNumber+0x400>)
 8000bdc:	f001 fa05 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000be0:	bf00      	nop
	}
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40010800 	.word	0x40010800

08000bf0 <displayLED>:

void displayLED(int index) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	switch (index) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	f200 80de 	bhi.w	8000dbc <displayLED+0x1cc>
 8000c00:	a201      	add	r2, pc, #4	; (adr r2, 8000c08 <displayLED+0x18>)
 8000c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c06:	bf00      	nop
 8000c08:	08000c1d 	.word	0x08000c1d
 8000c0c:	08000c61 	.word	0x08000c61
 8000c10:	08000cb3 	.word	0x08000cb3
 8000c14:	08000d0f 	.word	0x08000d0f
 8000c18:	08000d61 	.word	0x08000d61
	case 0:
		displayNumber(getMode());
 8000c1c:	f7ff fddc 	bl	80007d8 <getMode>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fde2 	bl	80007ec <displayNumber>
		HAL_GPIO_WritePin(EN_MODE_GPIO_Port, EN_MODE_Pin, GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	4866      	ldr	r0, [pc, #408]	; (8000dc8 <displayLED+0x1d8>)
 8000c2e:	f001 f9dc 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_7S1_GPIO_Port, EN1_7S1_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	4864      	ldr	r0, [pc, #400]	; (8000dc8 <displayLED+0x1d8>)
 8000c38:	f001 f9d7 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_7S2_GPIO_Port, EN1_7S2_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2180      	movs	r1, #128	; 0x80
 8000c40:	4861      	ldr	r0, [pc, #388]	; (8000dc8 <displayLED+0x1d8>)
 8000c42:	f001 f9d2 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_7S1_GPIO_Port, EN2_7S1_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4c:	485e      	ldr	r0, [pc, #376]	; (8000dc8 <displayLED+0x1d8>)
 8000c4e:	f001 f9cc 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_7S2_GPIO_Port, EN2_7S2_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c58:	485b      	ldr	r0, [pc, #364]	; (8000dc8 <displayLED+0x1d8>)
 8000c5a:	f001 f9c6 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000c5e:	e0ae      	b.n	8000dbe <displayLED+0x1ce>
	case 1:
		displayNumber(getDisplayValue(0) / 10);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 fa57 	bl	8001114 <getDisplayValue>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a58      	ldr	r2, [pc, #352]	; (8000dcc <displayLED+0x1dc>)
 8000c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6e:	1092      	asrs	r2, r2, #2
 8000c70:	17db      	asrs	r3, r3, #31
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fdb9 	bl	80007ec <displayNumber>
		HAL_GPIO_WritePin(EN_MODE_GPIO_Port, EN_MODE_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	4852      	ldr	r0, [pc, #328]	; (8000dc8 <displayLED+0x1d8>)
 8000c80:	f001 f9b3 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_7S1_GPIO_Port, EN1_7S1_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2140      	movs	r1, #64	; 0x40
 8000c88:	484f      	ldr	r0, [pc, #316]	; (8000dc8 <displayLED+0x1d8>)
 8000c8a:	f001 f9ae 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_7S2_GPIO_Port, EN1_7S2_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	484d      	ldr	r0, [pc, #308]	; (8000dc8 <displayLED+0x1d8>)
 8000c94:	f001 f9a9 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_7S1_GPIO_Port, EN2_7S1_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9e:	484a      	ldr	r0, [pc, #296]	; (8000dc8 <displayLED+0x1d8>)
 8000ca0:	f001 f9a3 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_7S2_GPIO_Port, EN2_7S2_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000caa:	4847      	ldr	r0, [pc, #284]	; (8000dc8 <displayLED+0x1d8>)
 8000cac:	f001 f99d 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000cb0:	e085      	b.n	8000dbe <displayLED+0x1ce>
	case 2:
		displayNumber(getDisplayValue(0) % 10);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 fa2e 	bl	8001114 <getDisplayValue>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <displayLED+0x1dc>)
 8000cbc:	fb83 2301 	smull	r2, r3, r3, r1
 8000cc0:	109a      	asrs	r2, r3, #2
 8000cc2:	17cb      	asrs	r3, r1, #31
 8000cc4:	1ad2      	subs	r2, r2, r3
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	1aca      	subs	r2, r1, r3
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	f7ff fd8b 	bl	80007ec <displayNumber>
		HAL_GPIO_WritePin(EN_MODE_GPIO_Port, EN_MODE_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2120      	movs	r1, #32
 8000cda:	483b      	ldr	r0, [pc, #236]	; (8000dc8 <displayLED+0x1d8>)
 8000cdc:	f001 f985 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_7S1_GPIO_Port, EN1_7S1_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2140      	movs	r1, #64	; 0x40
 8000ce4:	4838      	ldr	r0, [pc, #224]	; (8000dc8 <displayLED+0x1d8>)
 8000ce6:	f001 f980 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_7S2_GPIO_Port, EN1_7S2_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	4836      	ldr	r0, [pc, #216]	; (8000dc8 <displayLED+0x1d8>)
 8000cf0:	f001 f97b 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_7S1_GPIO_Port, EN2_7S1_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfa:	4833      	ldr	r0, [pc, #204]	; (8000dc8 <displayLED+0x1d8>)
 8000cfc:	f001 f975 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_7S2_GPIO_Port, EN2_7S2_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d06:	4830      	ldr	r0, [pc, #192]	; (8000dc8 <displayLED+0x1d8>)
 8000d08:	f001 f96f 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000d0c:	e057      	b.n	8000dbe <displayLED+0x1ce>
	case 3:
		displayNumber(getDisplayValue(1) / 10);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f000 fa00 	bl	8001114 <getDisplayValue>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <displayLED+0x1dc>)
 8000d18:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1c:	1092      	asrs	r2, r2, #2
 8000d1e:	17db      	asrs	r3, r3, #31
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fd62 	bl	80007ec <displayNumber>
		HAL_GPIO_WritePin(EN_MODE_GPIO_Port, EN_MODE_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	4826      	ldr	r0, [pc, #152]	; (8000dc8 <displayLED+0x1d8>)
 8000d2e:	f001 f95c 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_7S1_GPIO_Port, EN1_7S1_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2140      	movs	r1, #64	; 0x40
 8000d36:	4824      	ldr	r0, [pc, #144]	; (8000dc8 <displayLED+0x1d8>)
 8000d38:	f001 f957 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_7S2_GPIO_Port, EN1_7S2_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	4821      	ldr	r0, [pc, #132]	; (8000dc8 <displayLED+0x1d8>)
 8000d42:	f001 f952 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_7S1_GPIO_Port, EN2_7S1_Pin, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4c:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <displayLED+0x1d8>)
 8000d4e:	f001 f94c 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_7S2_GPIO_Port, EN2_7S2_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d58:	481b      	ldr	r0, [pc, #108]	; (8000dc8 <displayLED+0x1d8>)
 8000d5a:	f001 f946 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000d5e:	e02e      	b.n	8000dbe <displayLED+0x1ce>
	case 4:
		displayNumber(getDisplayValue(1) % 10);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f000 f9d7 	bl	8001114 <getDisplayValue>
 8000d66:	4601      	mov	r1, r0
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <displayLED+0x1dc>)
 8000d6a:	fb83 2301 	smull	r2, r3, r3, r1
 8000d6e:	109a      	asrs	r2, r3, #2
 8000d70:	17cb      	asrs	r3, r1, #31
 8000d72:	1ad2      	subs	r2, r2, r3
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	1aca      	subs	r2, r1, r3
 8000d7e:	4610      	mov	r0, r2
 8000d80:	f7ff fd34 	bl	80007ec <displayNumber>
		HAL_GPIO_WritePin(EN_MODE_GPIO_Port, EN_MODE_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2120      	movs	r1, #32
 8000d88:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <displayLED+0x1d8>)
 8000d8a:	f001 f92e 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_7S1_GPIO_Port, EN1_7S1_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <displayLED+0x1d8>)
 8000d94:	f001 f929 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_7S2_GPIO_Port, EN1_7S2_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <displayLED+0x1d8>)
 8000d9e:	f001 f924 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_7S1_GPIO_Port, EN2_7S1_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <displayLED+0x1d8>)
 8000daa:	f001 f91e 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_7S2_GPIO_Port, EN2_7S2_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <displayLED+0x1d8>)
 8000db6:	f001 f918 	bl	8001fea <HAL_GPIO_WritePin>
		break;
 8000dba:	e000      	b.n	8000dbe <displayLED+0x1ce>
	default:
		break;
 8000dbc:	bf00      	nop
	}
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40010c00 	.word	0x40010c00
 8000dcc:	66666667 	.word	0x66666667

08000dd0 <displayController>:

int indexLED = 0;
void displayController(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	displayLED(indexLED);
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <displayController+0xac>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff09 	bl	8000bf0 <displayLED>
	if (finishedTimer3()) {
 8000dde:	f000 fcf9 	bl	80017d4 <finishedTimer3>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d046      	beq.n	8000e76 <displayController+0xa6>
		setTimer3();
 8000de8:	f000 fcca 	bl	8001780 <setTimer3>
		switch (getMode()) {
 8000dec:	f7ff fcf4 	bl	80007d8 <getMode>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b07      	cmp	r3, #7
 8000df4:	dc38      	bgt.n	8000e68 <displayController+0x98>
 8000df6:	2b05      	cmp	r3, #5
 8000df8:	da21      	bge.n	8000e3e <displayController+0x6e>
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <displayController+0x3a>
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dd32      	ble.n	8000e68 <displayController+0x98>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d82f      	bhi.n	8000e68 <displayController+0x98>
 8000e08:	e00c      	b.n	8000e24 <displayController+0x54>
		case 1:
			indexLED ++;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <displayController+0xac>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <displayController+0xac>)
 8000e12:	6013      	str	r3, [r2, #0]
			if (indexLED > 4) indexLED = 0;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <displayController+0xac>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	dd27      	ble.n	8000e6c <displayController+0x9c>
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <displayController+0xac>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
			break;
 8000e22:	e023      	b.n	8000e6c <displayController+0x9c>
		case 2:
		case 3:
		case 4:
			indexLED ++;
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <displayController+0xac>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <displayController+0xac>)
 8000e2c:	6013      	str	r3, [r2, #0]
			if (indexLED > 2) indexLED = 0;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <displayController+0xac>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	dd1c      	ble.n	8000e70 <displayController+0xa0>
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <displayController+0xac>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
			break;
 8000e3c:	e018      	b.n	8000e70 <displayController+0xa0>
		case 5:
		case 6:
		case 7:
			if (indexLED == 0) indexLED = 3;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <displayController+0xac>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d103      	bne.n	8000e4e <displayController+0x7e>
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <displayController+0xac>)
 8000e48:	2203      	movs	r2, #3
 8000e4a:	601a      	str	r2, [r3, #0]
			else {
				indexLED ++;
				if (indexLED > 4) indexLED = 0;
			}
			break;
 8000e4c:	e012      	b.n	8000e74 <displayController+0xa4>
				indexLED ++;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <displayController+0xac>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <displayController+0xac>)
 8000e56:	6013      	str	r3, [r2, #0]
				if (indexLED > 4) indexLED = 0;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <displayController+0xac>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	dd09      	ble.n	8000e74 <displayController+0xa4>
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <displayController+0xac>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
			break;
 8000e66:	e005      	b.n	8000e74 <displayController+0xa4>
		default:
			break;
 8000e68:	bf00      	nop
 8000e6a:	e004      	b.n	8000e76 <displayController+0xa6>
			break;
 8000e6c:	bf00      	nop
 8000e6e:	e002      	b.n	8000e76 <displayController+0xa6>
			break;
 8000e70:	bf00      	nop
 8000e72:	e000      	b.n	8000e76 <displayController+0xa6>
			break;
 8000e74:	bf00      	nop
		}
	}
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000088 	.word	0x20000088

08000e80 <resetIndexLED>:
void resetIndexLED(void) {
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
	indexLED = 0;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <resetIndexLED+0x14>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000088 	.word	0x20000088

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fda2 	bl	80019e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f814 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f89a 	bl	8000fdc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ea8:	f000 f84c 	bl	8000f44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <main+0x2c>)
 8000eae:	f001 fd05 	bl	80028bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2120      	movs	r1, #32
 8000eb6:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <main+0x30>)
 8000eb8:	f001 f897 	bl	8001fea <HAL_GPIO_WritePin>
  while (1)
  {
	  dataProcessing();
 8000ebc:	f000 f97e 	bl	80011bc <dataProcessing>
 8000ec0:	e7fc      	b.n	8000ebc <main+0x24>
 8000ec2:	bf00      	nop
 8000ec4:	2000008c 	.word	0x2000008c
 8000ec8:	40010800 	.word	0x40010800

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b090      	sub	sp, #64	; 0x40
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	2228      	movs	r2, #40	; 0x28
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 f882 	bl	8002fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 f8a2 	bl	800204c <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f0e:	f000 f8c7 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f12:	230f      	movs	r3, #15
 8000f14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fb10 	bl	8002550 <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f36:	f000 f8b3 	bl	80010a0 <Error_Handler>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3740      	adds	r7, #64	; 0x40
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f6a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f78:	2209      	movs	r2, #9
 8000f7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f88:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f8a:	f001 fc47 	bl	800281c <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f94:	f000 f884 	bl	80010a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000fa6:	f001 fddd 	bl	8002b64 <HAL_TIM_ConfigClockSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fb0:	f000 f876 	bl	80010a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000fc2:	f001 ffa5 	bl	8002f10 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fcc:	f000 f868 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000008c 	.word	0x2000008c

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <MX_GPIO_Init+0xb8>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a27      	ldr	r2, [pc, #156]	; (8001094 <MX_GPIO_Init+0xb8>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <MX_GPIO_Init+0xb8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <MX_GPIO_Init+0xb8>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_GPIO_Init+0xb8>)
 800100e:	f043 0308 	orr.w	r3, r3, #8
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_GPIO_Init+0xb8>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LOAD_Pin|SEG_A_Pin|SEG_B_Pin
 8001020:	2200      	movs	r2, #0
 8001022:	f64f 6160 	movw	r1, #65120	; 0xfe60
 8001026:	481c      	ldr	r0, [pc, #112]	; (8001098 <MX_GPIO_Init+0xbc>)
 8001028:	f000 ffdf 	bl	8001fea <HAL_GPIO_WritePin>
                          |SEG_C_Pin|SEG_D_Pin|SEG_E_Pin|SEG_F_Pin
                          |SEG_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN1_RED_Pin|EN1_AMB_Pin|EN1_GRE_Pin|EN2_RED_Pin
 800102c:	2200      	movs	r2, #0
 800102e:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001032:	481a      	ldr	r0, [pc, #104]	; (800109c <MX_GPIO_Init+0xc0>)
 8001034:	f000 ffd9 	bl	8001fea <HAL_GPIO_WritePin>
                          |EN1_7S2_Pin|EN2_7S1_Pin|EN2_7S2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_Pin LOAD_Pin SEG_A_Pin SEG_B_Pin
                           SEG_C_Pin SEG_D_Pin SEG_E_Pin SEG_F_Pin
                           SEG_G_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LOAD_Pin|SEG_A_Pin|SEG_B_Pin
 8001038:	f64f 6360 	movw	r3, #65120	; 0xfe60
 800103c:	60bb      	str	r3, [r7, #8]
                          |SEG_C_Pin|SEG_D_Pin|SEG_E_Pin|SEG_F_Pin
                          |SEG_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2302      	movs	r3, #2
 8001048:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4619      	mov	r1, r3
 8001050:	4811      	ldr	r0, [pc, #68]	; (8001098 <MX_GPIO_Init+0xbc>)
 8001052:	f000 fe37 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT_0_Pin BUT_1_Pin BUT_2_Pin BUT_3_Pin */
  GPIO_InitStruct.Pin = BUT_0_Pin|BUT_1_Pin|BUT_2_Pin|BUT_3_Pin;
 8001056:	230f      	movs	r3, #15
 8001058:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105e:	2301      	movs	r3, #1
 8001060:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4619      	mov	r1, r3
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <MX_GPIO_Init+0xc0>)
 800106a:	f000 fe2b 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_RED_Pin EN1_AMB_Pin EN1_GRE_Pin EN2_RED_Pin
                           EN2_AMB_Pin EN2_GRE_Pin EN_MODE_Pin EN1_7S1_Pin
                           EN1_7S2_Pin EN2_7S1_Pin EN2_7S2_Pin */
  GPIO_InitStruct.Pin = EN1_RED_Pin|EN1_AMB_Pin|EN1_GRE_Pin|EN2_RED_Pin
 800106e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001072:	60bb      	str	r3, [r7, #8]
                          |EN2_AMB_Pin|EN2_GRE_Pin|EN_MODE_Pin|EN1_7S1_Pin
                          |EN1_7S2_Pin|EN2_7S1_Pin|EN2_7S2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	4619      	mov	r1, r3
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_GPIO_Init+0xc0>)
 8001088:	f000 fe1c 	bl	8001cc4 <HAL_GPIO_Init>

}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	40010800 	.word	0x40010800
 800109c:	40010c00 	.word	0x40010c00

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <Error_Handler+0x8>
	...

080010ac <setDurationValue>:

// For all mode
int durationBuffer[6] = {5,5,5,5,5,5};
int displayBuffer[2] = {1,1};

void setDurationValue(int index, int value) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	durationBuffer[index] = value;
 80010b6:	4905      	ldr	r1, [pc, #20]	; (80010cc <setDurationValue+0x20>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000004 	.word	0x20000004

080010d0 <getDurationValue>:
int getDurationValue(int index) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	return durationBuffer[index];
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <getDurationValue+0x1c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000004 	.word	0x20000004

080010f0 <setDisplayValue>:
void setDisplayValue(int index, int value) {
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	displayBuffer[index] = value;
 80010fa:	4905      	ldr	r1, [pc, #20]	; (8001110 <setDisplayValue+0x20>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	2000001c 	.word	0x2000001c

08001114 <getDisplayValue>:
int getDisplayValue(int index) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	return displayBuffer[index];
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <getDisplayValue+0x1c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000001c 	.word	0x2000001c

08001134 <resetCounterBuffer1>:

// For mode 1
int counterBuffer[6] = {5,5,5,5,5,5};
void resetCounterBuffer1(void) {
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i ++) {
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	e00a      	b.n	8001156 <resetCounterBuffer1+0x22>
		counterBuffer[i] = durationBuffer[i];
 8001140:	4a09      	ldr	r2, [pc, #36]	; (8001168 <resetCounterBuffer1+0x34>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001148:	4908      	ldr	r1, [pc, #32]	; (800116c <resetCounterBuffer1+0x38>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 3; i ++) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3301      	adds	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b02      	cmp	r3, #2
 800115a:	ddf1      	ble.n	8001140 <resetCounterBuffer1+0xc>
	}
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	20000004 	.word	0x20000004
 800116c:	20000024 	.word	0x20000024

08001170 <resetCounterBuffer2>:
void resetCounterBuffer2(void) {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
	for (int i = 3; i < 6; i ++) {
 8001176:	2303      	movs	r3, #3
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	e00a      	b.n	8001192 <resetCounterBuffer2+0x22>
		counterBuffer[i] = durationBuffer[i];
 800117c:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <resetCounterBuffer2+0x34>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001184:	4908      	ldr	r1, [pc, #32]	; (80011a8 <resetCounterBuffer2+0x38>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 3; i < 6; i ++) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3301      	adds	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b05      	cmp	r3, #5
 8001196:	ddf1      	ble.n	800117c <resetCounterBuffer2+0xc>
	}
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	20000004 	.word	0x20000004
 80011a8:	20000024 	.word	0x20000024

080011ac <resetCounterBuffer>:
void resetCounterBuffer(void) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	resetCounterBuffer1();
 80011b0:	f7ff ffc0 	bl	8001134 <resetCounterBuffer1>
	resetCounterBuffer2();
 80011b4:	f7ff ffdc 	bl	8001170 <resetCounterBuffer2>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <dataProcessing>:

// Processing
void dataProcessing(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	displayController();
 80011c0:	f7ff fe06 	bl	8000dd0 <displayController>
	modeSelection();
 80011c4:	f7ff f89a 	bl	80002fc <modeSelection>
	increaseDurationValue();
 80011c8:	f7ff f904 	bl	80003d4 <increaseDurationValue>
	decreaseDurationValue();
 80011cc:	f7ff f9d2 	bl	8000574 <decreaseDurationValue>
	setupDurationValue();
 80011d0:	f7ff faa0 	bl	8000714 <setupDurationValue>
	switch (getMode()) {
 80011d4:	f7ff fb00 	bl	80007d8 <getMode>
 80011d8:	4603      	mov	r3, r0
 80011da:	3b01      	subs	r3, #1
 80011dc:	2b06      	cmp	r3, #6
 80011de:	f200 820e 	bhi.w	80015fe <dataProcessing+0x442>
 80011e2:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <dataProcessing+0x2c>)
 80011e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e8:	08001205 	.word	0x08001205
 80011ec:	080013e9 	.word	0x080013e9
 80011f0:	08001441 	.word	0x08001441
 80011f4:	08001499 	.word	0x08001499
 80011f8:	080014fd 	.word	0x080014fd
 80011fc:	08001553 	.word	0x08001553
 8001200:	080015a9 	.word	0x080015a9
	case 1:
		if (counterBuffer[2] > 0) {
 8001204:	4bba      	ldr	r3, [pc, #744]	; (80014f0 <dataProcessing+0x334>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	dd22      	ble.n	8001252 <dataProcessing+0x96>
			HAL_GPIO_WritePin(EN1_RED_GPIO_Port, EN1_RED_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001212:	48b8      	ldr	r0, [pc, #736]	; (80014f4 <dataProcessing+0x338>)
 8001214:	f000 fee9 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_AMB_GPIO_Port, EN1_AMB_Pin, GPIO_PIN_SET);
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800121e:	48b5      	ldr	r0, [pc, #724]	; (80014f4 <dataProcessing+0x338>)
 8001220:	f000 fee3 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GRE_GPIO_Port, EN1_GRE_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122a:	48b2      	ldr	r0, [pc, #712]	; (80014f4 <dataProcessing+0x338>)
 800122c:	f000 fedd 	bl	8001fea <HAL_GPIO_WritePin>
			displayBuffer[0] = counterBuffer[2];
 8001230:	4baf      	ldr	r3, [pc, #700]	; (80014f0 <dataProcessing+0x334>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4ab0      	ldr	r2, [pc, #704]	; (80014f8 <dataProcessing+0x33c>)
 8001236:	6013      	str	r3, [r2, #0]
			if (finishedTimer0()) {
 8001238:	f000 fa1e 	bl	8001678 <finishedTimer0>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d057      	beq.n	80012f2 <dataProcessing+0x136>
				setTimer0();
 8001242:	f000 f9ef 	bl	8001624 <setTimer0>
				counterBuffer[2] --;
 8001246:	4baa      	ldr	r3, [pc, #680]	; (80014f0 <dataProcessing+0x334>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	3b01      	subs	r3, #1
 800124c:	4aa8      	ldr	r2, [pc, #672]	; (80014f0 <dataProcessing+0x334>)
 800124e:	6093      	str	r3, [r2, #8]
 8001250:	e04f      	b.n	80012f2 <dataProcessing+0x136>
			}
		}
		else if (counterBuffer[1] > 0) {
 8001252:	4ba7      	ldr	r3, [pc, #668]	; (80014f0 <dataProcessing+0x334>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	dd22      	ble.n	80012a0 <dataProcessing+0xe4>
			HAL_GPIO_WritePin(EN1_RED_GPIO_Port, EN1_RED_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001260:	48a4      	ldr	r0, [pc, #656]	; (80014f4 <dataProcessing+0x338>)
 8001262:	f000 fec2 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_AMB_GPIO_Port, EN1_AMB_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800126c:	48a1      	ldr	r0, [pc, #644]	; (80014f4 <dataProcessing+0x338>)
 800126e:	f000 febc 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GRE_GPIO_Port, EN1_GRE_Pin, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001278:	489e      	ldr	r0, [pc, #632]	; (80014f4 <dataProcessing+0x338>)
 800127a:	f000 feb6 	bl	8001fea <HAL_GPIO_WritePin>
			displayBuffer[0] = counterBuffer[1];
 800127e:	4b9c      	ldr	r3, [pc, #624]	; (80014f0 <dataProcessing+0x334>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a9d      	ldr	r2, [pc, #628]	; (80014f8 <dataProcessing+0x33c>)
 8001284:	6013      	str	r3, [r2, #0]
			if (finishedTimer0()) {
 8001286:	f000 f9f7 	bl	8001678 <finishedTimer0>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d030      	beq.n	80012f2 <dataProcessing+0x136>
				setTimer0();
 8001290:	f000 f9c8 	bl	8001624 <setTimer0>
				counterBuffer[1] --;
 8001294:	4b96      	ldr	r3, [pc, #600]	; (80014f0 <dataProcessing+0x334>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	3b01      	subs	r3, #1
 800129a:	4a95      	ldr	r2, [pc, #596]	; (80014f0 <dataProcessing+0x334>)
 800129c:	6053      	str	r3, [r2, #4]
 800129e:	e028      	b.n	80012f2 <dataProcessing+0x136>
			}
		}
		else if (counterBuffer[0] > 0) {
 80012a0:	4b93      	ldr	r3, [pc, #588]	; (80014f0 <dataProcessing+0x334>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	dd22      	ble.n	80012ee <dataProcessing+0x132>
			HAL_GPIO_WritePin(EN1_RED_GPIO_Port, EN1_RED_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ae:	4891      	ldr	r0, [pc, #580]	; (80014f4 <dataProcessing+0x338>)
 80012b0:	f000 fe9b 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_AMB_GPIO_Port, EN1_AMB_Pin, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ba:	488e      	ldr	r0, [pc, #568]	; (80014f4 <dataProcessing+0x338>)
 80012bc:	f000 fe95 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GRE_GPIO_Port, EN1_GRE_Pin, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c6:	488b      	ldr	r0, [pc, #556]	; (80014f4 <dataProcessing+0x338>)
 80012c8:	f000 fe8f 	bl	8001fea <HAL_GPIO_WritePin>
			displayBuffer[0] = counterBuffer[0];
 80012cc:	4b88      	ldr	r3, [pc, #544]	; (80014f0 <dataProcessing+0x334>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a89      	ldr	r2, [pc, #548]	; (80014f8 <dataProcessing+0x33c>)
 80012d2:	6013      	str	r3, [r2, #0]
			if (finishedTimer0()) {
 80012d4:	f000 f9d0 	bl	8001678 <finishedTimer0>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d009      	beq.n	80012f2 <dataProcessing+0x136>
				setTimer0();
 80012de:	f000 f9a1 	bl	8001624 <setTimer0>
				counterBuffer[0] --;
 80012e2:	4b83      	ldr	r3, [pc, #524]	; (80014f0 <dataProcessing+0x334>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	4a81      	ldr	r2, [pc, #516]	; (80014f0 <dataProcessing+0x334>)
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e001      	b.n	80012f2 <dataProcessing+0x136>
			}
		}
		else {
			resetCounterBuffer1();
 80012ee:	f7ff ff21 	bl	8001134 <resetCounterBuffer1>
		}
		if (counterBuffer[3] > 0) {
 80012f2:	4b7f      	ldr	r3, [pc, #508]	; (80014f0 <dataProcessing+0x334>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dd23      	ble.n	8001342 <dataProcessing+0x186>
			HAL_GPIO_WritePin(EN2_RED_GPIO_Port, EN2_RED_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001300:	487c      	ldr	r0, [pc, #496]	; (80014f4 <dataProcessing+0x338>)
 8001302:	f000 fe72 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_AMB_GPIO_Port, EN2_AMB_Pin, GPIO_PIN_SET);
 8001306:	2201      	movs	r2, #1
 8001308:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800130c:	4879      	ldr	r0, [pc, #484]	; (80014f4 <dataProcessing+0x338>)
 800130e:	f000 fe6c 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GRE_GPIO_Port, EN2_GRE_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001318:	4876      	ldr	r0, [pc, #472]	; (80014f4 <dataProcessing+0x338>)
 800131a:	f000 fe66 	bl	8001fea <HAL_GPIO_WritePin>
			displayBuffer[1] = counterBuffer[3];
 800131e:	4b74      	ldr	r3, [pc, #464]	; (80014f0 <dataProcessing+0x334>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	4a75      	ldr	r2, [pc, #468]	; (80014f8 <dataProcessing+0x33c>)
 8001324:	6053      	str	r3, [r2, #4]
			if (finishedTimer1()) {
 8001326:	f000 f9e1 	bl	80016ec <finishedTimer1>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8168 	beq.w	8001602 <dataProcessing+0x446>
				setTimer1();
 8001332:	f000 f9b1 	bl	8001698 <setTimer1>
				counterBuffer[3] --;
 8001336:	4b6e      	ldr	r3, [pc, #440]	; (80014f0 <dataProcessing+0x334>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	4a6c      	ldr	r2, [pc, #432]	; (80014f0 <dataProcessing+0x334>)
 800133e:	60d3      	str	r3, [r2, #12]
			}
		}
		else {
			resetCounterBuffer2();
		}
		break;
 8001340:	e15f      	b.n	8001602 <dataProcessing+0x446>
		else if (counterBuffer[5] > 0) {
 8001342:	4b6b      	ldr	r3, [pc, #428]	; (80014f0 <dataProcessing+0x334>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	dd23      	ble.n	8001392 <dataProcessing+0x1d6>
			HAL_GPIO_WritePin(EN2_RED_GPIO_Port, EN2_RED_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001350:	4868      	ldr	r0, [pc, #416]	; (80014f4 <dataProcessing+0x338>)
 8001352:	f000 fe4a 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_AMB_GPIO_Port, EN2_AMB_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800135c:	4865      	ldr	r0, [pc, #404]	; (80014f4 <dataProcessing+0x338>)
 800135e:	f000 fe44 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GRE_GPIO_Port, EN2_GRE_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001368:	4862      	ldr	r0, [pc, #392]	; (80014f4 <dataProcessing+0x338>)
 800136a:	f000 fe3e 	bl	8001fea <HAL_GPIO_WritePin>
			displayBuffer[1] = counterBuffer[5];
 800136e:	4b60      	ldr	r3, [pc, #384]	; (80014f0 <dataProcessing+0x334>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a61      	ldr	r2, [pc, #388]	; (80014f8 <dataProcessing+0x33c>)
 8001374:	6053      	str	r3, [r2, #4]
			if (finishedTimer1()) {
 8001376:	f000 f9b9 	bl	80016ec <finishedTimer1>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 8140 	beq.w	8001602 <dataProcessing+0x446>
				setTimer1();
 8001382:	f000 f989 	bl	8001698 <setTimer1>
				counterBuffer[5] --;
 8001386:	4b5a      	ldr	r3, [pc, #360]	; (80014f0 <dataProcessing+0x334>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	3b01      	subs	r3, #1
 800138c:	4a58      	ldr	r2, [pc, #352]	; (80014f0 <dataProcessing+0x334>)
 800138e:	6153      	str	r3, [r2, #20]
		break;
 8001390:	e137      	b.n	8001602 <dataProcessing+0x446>
		else if (counterBuffer[4] > 0) {
 8001392:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <dataProcessing+0x334>)
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	dd23      	ble.n	80013e2 <dataProcessing+0x226>
			HAL_GPIO_WritePin(EN2_RED_GPIO_Port, EN2_RED_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a0:	4854      	ldr	r0, [pc, #336]	; (80014f4 <dataProcessing+0x338>)
 80013a2:	f000 fe22 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_AMB_GPIO_Port, EN2_AMB_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ac:	4851      	ldr	r0, [pc, #324]	; (80014f4 <dataProcessing+0x338>)
 80013ae:	f000 fe1c 	bl	8001fea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GRE_GPIO_Port, EN2_GRE_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	484e      	ldr	r0, [pc, #312]	; (80014f4 <dataProcessing+0x338>)
 80013ba:	f000 fe16 	bl	8001fea <HAL_GPIO_WritePin>
			displayBuffer[1] = counterBuffer[4];
 80013be:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <dataProcessing+0x334>)
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <dataProcessing+0x33c>)
 80013c4:	6053      	str	r3, [r2, #4]
			if (finishedTimer1()) {
 80013c6:	f000 f991 	bl	80016ec <finishedTimer1>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 8118 	beq.w	8001602 <dataProcessing+0x446>
				setTimer1();
 80013d2:	f000 f961 	bl	8001698 <setTimer1>
				counterBuffer[4] --;
 80013d6:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <dataProcessing+0x334>)
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	3b01      	subs	r3, #1
 80013dc:	4a44      	ldr	r2, [pc, #272]	; (80014f0 <dataProcessing+0x334>)
 80013de:	6113      	str	r3, [r2, #16]
		break;
 80013e0:	e10f      	b.n	8001602 <dataProcessing+0x446>
			resetCounterBuffer2();
 80013e2:	f7ff fec5 	bl	8001170 <resetCounterBuffer2>
		break;
 80013e6:	e10c      	b.n	8001602 <dataProcessing+0x446>
	case 2:
		HAL_GPIO_WritePin(EN1_AMB_GPIO_Port, EN1_AMB_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ee:	4841      	ldr	r0, [pc, #260]	; (80014f4 <dataProcessing+0x338>)
 80013f0:	f000 fdfb 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GRE_GPIO_Port, EN1_GRE_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	483e      	ldr	r0, [pc, #248]	; (80014f4 <dataProcessing+0x338>)
 80013fc:	f000 fdf5 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_RED_GPIO_Port, EN2_RED_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001406:	483b      	ldr	r0, [pc, #236]	; (80014f4 <dataProcessing+0x338>)
 8001408:	f000 fdef 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_AMB_GPIO_Port, EN2_AMB_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001412:	4838      	ldr	r0, [pc, #224]	; (80014f4 <dataProcessing+0x338>)
 8001414:	f000 fde9 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GRE_GPIO_Port, EN2_GRE_Pin, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800141e:	4835      	ldr	r0, [pc, #212]	; (80014f4 <dataProcessing+0x338>)
 8001420:	f000 fde3 	bl	8001fea <HAL_GPIO_WritePin>
		if (finishedTimer2()) {
 8001424:	f000 f99c 	bl	8001760 <finishedTimer2>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 80eb 	beq.w	8001606 <dataProcessing+0x44a>
			setTimer2();
 8001430:	f000 f96c 	bl	800170c <setTimer2>
			HAL_GPIO_TogglePin(EN1_RED_GPIO_Port, EN1_RED_Pin);
 8001434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001438:	482e      	ldr	r0, [pc, #184]	; (80014f4 <dataProcessing+0x338>)
 800143a:	f000 fdee 	bl	800201a <HAL_GPIO_TogglePin>
		}
		break;
 800143e:	e0e2      	b.n	8001606 <dataProcessing+0x44a>
	case 3:
		HAL_GPIO_WritePin(EN1_RED_GPIO_Port, EN1_RED_Pin, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001446:	482b      	ldr	r0, [pc, #172]	; (80014f4 <dataProcessing+0x338>)
 8001448:	f000 fdcf 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GRE_GPIO_Port, EN1_GRE_Pin, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001452:	4828      	ldr	r0, [pc, #160]	; (80014f4 <dataProcessing+0x338>)
 8001454:	f000 fdc9 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_RED_GPIO_Port, EN2_RED_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145e:	4825      	ldr	r0, [pc, #148]	; (80014f4 <dataProcessing+0x338>)
 8001460:	f000 fdc3 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_AMB_GPIO_Port, EN2_AMB_Pin, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800146a:	4822      	ldr	r0, [pc, #136]	; (80014f4 <dataProcessing+0x338>)
 800146c:	f000 fdbd 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GRE_GPIO_Port, EN2_GRE_Pin, GPIO_PIN_SET);
 8001470:	2201      	movs	r2, #1
 8001472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001476:	481f      	ldr	r0, [pc, #124]	; (80014f4 <dataProcessing+0x338>)
 8001478:	f000 fdb7 	bl	8001fea <HAL_GPIO_WritePin>
		if (finishedTimer2()) {
 800147c:	f000 f970 	bl	8001760 <finishedTimer2>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 80c1 	beq.w	800160a <dataProcessing+0x44e>
			setTimer2();
 8001488:	f000 f940 	bl	800170c <setTimer2>
			HAL_GPIO_TogglePin(EN1_AMB_GPIO_Port, EN1_AMB_Pin);
 800148c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001490:	4818      	ldr	r0, [pc, #96]	; (80014f4 <dataProcessing+0x338>)
 8001492:	f000 fdc2 	bl	800201a <HAL_GPIO_TogglePin>
		}
		break;
 8001496:	e0b8      	b.n	800160a <dataProcessing+0x44e>
	case 4:
		HAL_GPIO_WritePin(EN1_RED_GPIO_Port, EN1_RED_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800149e:	4815      	ldr	r0, [pc, #84]	; (80014f4 <dataProcessing+0x338>)
 80014a0:	f000 fda3 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_AMB_GPIO_Port, EN1_AMB_Pin, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <dataProcessing+0x338>)
 80014ac:	f000 fd9d 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_RED_GPIO_Port, EN2_RED_Pin, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b6:	480f      	ldr	r0, [pc, #60]	; (80014f4 <dataProcessing+0x338>)
 80014b8:	f000 fd97 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_AMB_GPIO_Port, EN2_AMB_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c2:	480c      	ldr	r0, [pc, #48]	; (80014f4 <dataProcessing+0x338>)
 80014c4:	f000 fd91 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GRE_GPIO_Port, EN2_GRE_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <dataProcessing+0x338>)
 80014d0:	f000 fd8b 	bl	8001fea <HAL_GPIO_WritePin>
		if (finishedTimer2()) {
 80014d4:	f000 f944 	bl	8001760 <finishedTimer2>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8097 	beq.w	800160e <dataProcessing+0x452>
			setTimer2();
 80014e0:	f000 f914 	bl	800170c <setTimer2>
			HAL_GPIO_TogglePin(EN1_GRE_GPIO_Port, EN1_GRE_Pin);
 80014e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <dataProcessing+0x338>)
 80014ea:	f000 fd96 	bl	800201a <HAL_GPIO_TogglePin>
		}
		break;
 80014ee:	e08e      	b.n	800160e <dataProcessing+0x452>
 80014f0:	20000024 	.word	0x20000024
 80014f4:	40010c00 	.word	0x40010c00
 80014f8:	2000001c 	.word	0x2000001c
	case 5:
		HAL_GPIO_WritePin(EN1_RED_GPIO_Port, EN1_RED_Pin, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001502:	4847      	ldr	r0, [pc, #284]	; (8001620 <dataProcessing+0x464>)
 8001504:	f000 fd71 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_AMB_GPIO_Port, EN1_AMB_Pin, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800150e:	4844      	ldr	r0, [pc, #272]	; (8001620 <dataProcessing+0x464>)
 8001510:	f000 fd6b 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GRE_GPIO_Port, EN1_GRE_Pin, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151a:	4841      	ldr	r0, [pc, #260]	; (8001620 <dataProcessing+0x464>)
 800151c:	f000 fd65 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_AMB_GPIO_Port, EN2_AMB_Pin, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001526:	483e      	ldr	r0, [pc, #248]	; (8001620 <dataProcessing+0x464>)
 8001528:	f000 fd5f 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GRE_GPIO_Port, EN2_GRE_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001532:	483b      	ldr	r0, [pc, #236]	; (8001620 <dataProcessing+0x464>)
 8001534:	f000 fd59 	bl	8001fea <HAL_GPIO_WritePin>
		if (finishedTimer2()) {
 8001538:	f000 f912 	bl	8001760 <finishedTimer2>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d067      	beq.n	8001612 <dataProcessing+0x456>
			setTimer2();
 8001542:	f000 f8e3 	bl	800170c <setTimer2>
			HAL_GPIO_TogglePin(EN2_RED_GPIO_Port, EN2_RED_Pin);
 8001546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154a:	4835      	ldr	r0, [pc, #212]	; (8001620 <dataProcessing+0x464>)
 800154c:	f000 fd65 	bl	800201a <HAL_GPIO_TogglePin>
		}
		break;
 8001550:	e05f      	b.n	8001612 <dataProcessing+0x456>
	case 6:
		HAL_GPIO_WritePin(EN1_RED_GPIO_Port, EN1_RED_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001558:	4831      	ldr	r0, [pc, #196]	; (8001620 <dataProcessing+0x464>)
 800155a:	f000 fd46 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_AMB_GPIO_Port, EN1_AMB_Pin, GPIO_PIN_SET);
 800155e:	2201      	movs	r2, #1
 8001560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001564:	482e      	ldr	r0, [pc, #184]	; (8001620 <dataProcessing+0x464>)
 8001566:	f000 fd40 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GRE_GPIO_Port, EN1_GRE_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001570:	482b      	ldr	r0, [pc, #172]	; (8001620 <dataProcessing+0x464>)
 8001572:	f000 fd3a 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_RED_GPIO_Port, EN2_RED_Pin, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157c:	4828      	ldr	r0, [pc, #160]	; (8001620 <dataProcessing+0x464>)
 800157e:	f000 fd34 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GRE_GPIO_Port, EN2_GRE_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001588:	4825      	ldr	r0, [pc, #148]	; (8001620 <dataProcessing+0x464>)
 800158a:	f000 fd2e 	bl	8001fea <HAL_GPIO_WritePin>
		if (finishedTimer2()) {
 800158e:	f000 f8e7 	bl	8001760 <finishedTimer2>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d03e      	beq.n	8001616 <dataProcessing+0x45a>
			setTimer2();
 8001598:	f000 f8b8 	bl	800170c <setTimer2>
			HAL_GPIO_TogglePin(EN2_AMB_GPIO_Port, EN2_AMB_Pin);
 800159c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a0:	481f      	ldr	r0, [pc, #124]	; (8001620 <dataProcessing+0x464>)
 80015a2:	f000 fd3a 	bl	800201a <HAL_GPIO_TogglePin>
		}
		break;
 80015a6:	e036      	b.n	8001616 <dataProcessing+0x45a>
	case 7:
		HAL_GPIO_WritePin(EN1_RED_GPIO_Port, EN1_RED_Pin, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ae:	481c      	ldr	r0, [pc, #112]	; (8001620 <dataProcessing+0x464>)
 80015b0:	f000 fd1b 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_AMB_GPIO_Port, EN1_AMB_Pin, GPIO_PIN_SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ba:	4819      	ldr	r0, [pc, #100]	; (8001620 <dataProcessing+0x464>)
 80015bc:	f000 fd15 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GRE_GPIO_Port, EN1_GRE_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015c6:	4816      	ldr	r0, [pc, #88]	; (8001620 <dataProcessing+0x464>)
 80015c8:	f000 fd0f 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_RED_GPIO_Port, EN2_RED_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d2:	4813      	ldr	r0, [pc, #76]	; (8001620 <dataProcessing+0x464>)
 80015d4:	f000 fd09 	bl	8001fea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_AMB_GPIO_Port, EN2_AMB_Pin, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015de:	4810      	ldr	r0, [pc, #64]	; (8001620 <dataProcessing+0x464>)
 80015e0:	f000 fd03 	bl	8001fea <HAL_GPIO_WritePin>
		if (finishedTimer2()) {
 80015e4:	f000 f8bc 	bl	8001760 <finishedTimer2>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d015      	beq.n	800161a <dataProcessing+0x45e>
			setTimer2();
 80015ee:	f000 f88d 	bl	800170c <setTimer2>
			HAL_GPIO_TogglePin(EN2_GRE_GPIO_Port, EN2_GRE_Pin);
 80015f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <dataProcessing+0x464>)
 80015f8:	f000 fd0f 	bl	800201a <HAL_GPIO_TogglePin>
		}
		break;
 80015fc:	e00d      	b.n	800161a <dataProcessing+0x45e>
	default:
		break;
 80015fe:	bf00      	nop
 8001600:	e00c      	b.n	800161c <dataProcessing+0x460>
		break;
 8001602:	bf00      	nop
 8001604:	e00a      	b.n	800161c <dataProcessing+0x460>
		break;
 8001606:	bf00      	nop
 8001608:	e008      	b.n	800161c <dataProcessing+0x460>
		break;
 800160a:	bf00      	nop
 800160c:	e006      	b.n	800161c <dataProcessing+0x460>
		break;
 800160e:	bf00      	nop
 8001610:	e004      	b.n	800161c <dataProcessing+0x460>
		break;
 8001612:	bf00      	nop
 8001614:	e002      	b.n	800161c <dataProcessing+0x460>
		break;
 8001616:	bf00      	nop
 8001618:	e000      	b.n	800161c <dataProcessing+0x460>
		break;
 800161a:	bf00      	nop
	}
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40010c00 	.word	0x40010c00

08001624 <setTimer0>:
#define LED7SEG_CYCLE 1000
#define AUTO_MODIFY_CYCLE 500

int timer0_counter = 0;
int timer0_flag = 0;
void setTimer0(void) {
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	timer0_counter = 1000 / TIMER_CYCLE;
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <setTimer0+0x18>)
 800162a:	2264      	movs	r2, #100	; 0x64
 800162c:	601a      	str	r2, [r3, #0]
	timer0_flag = 0;
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <setTimer0+0x1c>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	200000d4 	.word	0x200000d4
 8001640:	200000d8 	.word	0x200000d8

08001644 <runTimer0>:
void runTimer0(void) {
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <runTimer0+0x2c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	dd0b      	ble.n	8001668 <runTimer0+0x24>
		timer0_counter --;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <runTimer0+0x2c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3b01      	subs	r3, #1
 8001656:	4a06      	ldr	r2, [pc, #24]	; (8001670 <runTimer0+0x2c>)
 8001658:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <runTimer0+0x2c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <runTimer0+0x24>
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <runTimer0+0x30>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]
	}
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	200000d4 	.word	0x200000d4
 8001674:	200000d8 	.word	0x200000d8

08001678 <finishedTimer0>:
unsigned char finishedTimer0(void) {
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
	return (timer0_flag == 1);
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <finishedTimer0+0x1c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	200000d8 	.word	0x200000d8

08001698 <setTimer1>:

int timer1_counter = 0;
int timer1_flag = 0;
void setTimer1(void) {
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
	timer1_counter = 1000 / TIMER_CYCLE;
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <setTimer1+0x18>)
 800169e:	2264      	movs	r2, #100	; 0x64
 80016a0:	601a      	str	r2, [r3, #0]
	timer1_flag = 0;
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <setTimer1+0x1c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	200000dc 	.word	0x200000dc
 80016b4:	200000e0 	.word	0x200000e0

080016b8 <runTimer1>:
void runTimer1(void) {
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <runTimer1+0x2c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	dd0b      	ble.n	80016dc <runTimer1+0x24>
		timer1_counter --;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <runTimer1+0x2c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <runTimer1+0x2c>)
 80016cc:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <runTimer1+0x2c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <runTimer1+0x24>
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <runTimer1+0x30>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
	}
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	200000dc 	.word	0x200000dc
 80016e8:	200000e0 	.word	0x200000e0

080016ec <finishedTimer1>:
unsigned char finishedTimer1(void) {
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	return (timer1_flag == 1);
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <finishedTimer1+0x1c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	200000e0 	.word	0x200000e0

0800170c <setTimer2>:

int timer2_counter = 0;
int timer2_flag = 0;
void setTimer2(void) {
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
	timer2_counter = LED_BLINKY_CYCLE / TIMER_CYCLE;
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <setTimer2+0x18>)
 8001712:	2232      	movs	r2, #50	; 0x32
 8001714:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <setTimer2+0x1c>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	200000e4 	.word	0x200000e4
 8001728:	200000e8 	.word	0x200000e8

0800172c <runTimer2>:
void runTimer2(void) {
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
	if (timer2_counter > 0) {
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <runTimer2+0x2c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	dd0b      	ble.n	8001750 <runTimer2+0x24>
		timer2_counter --;
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <runTimer2+0x2c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3b01      	subs	r3, #1
 800173e:	4a06      	ldr	r2, [pc, #24]	; (8001758 <runTimer2+0x2c>)
 8001740:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <runTimer2+0x2c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <runTimer2+0x24>
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <runTimer2+0x30>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]
	}
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	200000e4 	.word	0x200000e4
 800175c:	200000e8 	.word	0x200000e8

08001760 <finishedTimer2>:
unsigned char finishedTimer2(void) {
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	return (timer2_flag == 1);
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <finishedTimer2+0x1c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	bf0c      	ite	eq
 800176c:	2301      	moveq	r3, #1
 800176e:	2300      	movne	r3, #0
 8001770:	b2db      	uxtb	r3, r3
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	200000e8 	.word	0x200000e8

08001780 <setTimer3>:

int timer3_counter = 0;
int timer3_flag = 0;
void setTimer3(void) {
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
	timer3_counter = LED7SEG_CYCLE / TIMER_CYCLE;
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <setTimer3+0x18>)
 8001786:	2264      	movs	r2, #100	; 0x64
 8001788:	601a      	str	r2, [r3, #0]
	timer3_flag = 0;
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <setTimer3+0x1c>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	200000ec 	.word	0x200000ec
 800179c:	200000f0 	.word	0x200000f0

080017a0 <runTimer3>:
void runTimer3(void) {
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
	if (timer3_counter > 0) {
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <runTimer3+0x2c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dd0b      	ble.n	80017c4 <runTimer3+0x24>
		timer3_counter --;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <runTimer3+0x2c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	4a06      	ldr	r2, [pc, #24]	; (80017cc <runTimer3+0x2c>)
 80017b4:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <runTimer3+0x2c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <runTimer3+0x24>
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <runTimer3+0x30>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
	}
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	200000ec 	.word	0x200000ec
 80017d0:	200000f0 	.word	0x200000f0

080017d4 <finishedTimer3>:
unsigned char finishedTimer3(void) {
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
	return (timer3_flag == 1);
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <finishedTimer3+0x1c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	bf0c      	ite	eq
 80017e0:	2301      	moveq	r3, #1
 80017e2:	2300      	movne	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	200000f0 	.word	0x200000f0

080017f4 <setTimer4>:

int timer4_counter = 0;
int timer4_flag = 0;
void setTimer4(void) {
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
	timer4_counter = AUTO_MODIFY_CYCLE / TIMER_CYCLE;
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <setTimer4+0x18>)
 80017fa:	2232      	movs	r2, #50	; 0x32
 80017fc:	601a      	str	r2, [r3, #0]
	timer4_flag = 0;
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <setTimer4+0x1c>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	200000f4 	.word	0x200000f4
 8001810:	200000f8 	.word	0x200000f8

08001814 <runTimer4>:
void runTimer4(void) {
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
	if (timer4_counter > 0) {
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <runTimer4+0x2c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	dd0b      	ble.n	8001838 <runTimer4+0x24>
		timer4_counter --;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <runTimer4+0x2c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3b01      	subs	r3, #1
 8001826:	4a06      	ldr	r2, [pc, #24]	; (8001840 <runTimer4+0x2c>)
 8001828:	6013      	str	r3, [r2, #0]
		if (timer4_counter == 0) timer4_flag = 1;
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <runTimer4+0x2c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d102      	bne.n	8001838 <runTimer4+0x24>
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <runTimer4+0x30>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]
	}
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	200000f4 	.word	0x200000f4
 8001844:	200000f8 	.word	0x200000f8

08001848 <finishedTimer4>:
unsigned char finishedTimer4(void) {
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
	return (timer4_flag == 1);
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <finishedTimer4+0x1c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	200000f8 	.word	0x200000f8

08001868 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	runTimer0();
 8001870:	f7ff fee8 	bl	8001644 <runTimer0>
	runTimer1();
 8001874:	f7ff ff20 	bl	80016b8 <runTimer1>
	runTimer2();
 8001878:	f7ff ff58 	bl	800172c <runTimer2>
	runTimer3();
 800187c:	f7ff ff90 	bl	80017a0 <runTimer3>
	runTimer4();
 8001880:	f7ff ffc8 	bl	8001814 <runTimer4>
	if (htim -> Instance == TIM2) {
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800188c:	d101      	bne.n	8001892 <HAL_TIM_PeriodElapsedCallback+0x2a>
		buttonReading();
 800188e:	f7fe fc5d 	bl	800014c <buttonReading>
	}
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_MspInit+0x40>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <HAL_MspInit+0x40>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6193      	str	r3, [r2, #24]
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_MspInit+0x40>)
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_MspInit+0x40>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_MspInit+0x40>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_MspInit+0x40>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f0:	d113      	bne.n	800191a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <HAL_TIM_Base_MspInit+0x44>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <HAL_TIM_Base_MspInit+0x44>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_TIM_Base_MspInit+0x44>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	201c      	movs	r0, #28
 8001910:	f000 f9a1 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001914:	201c      	movs	r0, #28
 8001916:	f000 f9ba 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800192c:	e7fe      	b.n	800192c <NMI_Handler+0x4>

0800192e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <MemManage_Handler+0x4>

0800193a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <UsageFault_Handler+0x4>

08001946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196e:	f000 f87f 	bl	8001a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <TIM2_IRQHandler+0x10>)
 800197e:	f000 ffe9 	bl	8002954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000008c 	.word	0x2000008c

0800198c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001998:	480c      	ldr	r0, [pc, #48]	; (80019cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800199a:	490d      	ldr	r1, [pc, #52]	; (80019d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800199c:	4a0d      	ldr	r2, [pc, #52]	; (80019d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a0:	e002      	b.n	80019a8 <LoopCopyDataInit>

080019a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a6:	3304      	adds	r3, #4

080019a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ac:	d3f9      	bcc.n	80019a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019b0:	4c0a      	ldr	r4, [pc, #40]	; (80019dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b4:	e001      	b.n	80019ba <LoopFillZerobss>

080019b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b8:	3204      	adds	r2, #4

080019ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019bc:	d3fb      	bcc.n	80019b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019be:	f7ff ffe5 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c2:	f001 fb17 	bl	8002ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019c6:	f7ff fa67 	bl	8000e98 <main>
  bx lr
 80019ca:	4770      	bx	lr
  ldr r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d0:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80019d4:	0800307c 	.word	0x0800307c
  ldr r2, =_sbss
 80019d8:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80019dc:	20000100 	.word	0x20000100

080019e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC1_2_IRQHandler>
	...

080019e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_Init+0x28>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <HAL_Init+0x28>)
 80019ee:	f043 0310 	orr.w	r3, r3, #16
 80019f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f923 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fa:	200f      	movs	r0, #15
 80019fc:	f000 f808 	bl	8001a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a00:	f7ff ff4c 	bl	800189c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40022000 	.word	0x40022000

08001a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_InitTick+0x54>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_InitTick+0x58>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f93b 	bl	8001caa <HAL_SYSTICK_Config>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00e      	b.n	8001a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d80a      	bhi.n	8001a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f000 f903 	bl	8001c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_InitTick+0x5c>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000003c 	.word	0x2000003c
 8001a68:	20000044 	.word	0x20000044
 8001a6c:	20000040 	.word	0x20000040

08001a70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_IncTick+0x1c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_IncTick+0x20>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	4a03      	ldr	r2, [pc, #12]	; (8001a90 <HAL_IncTick+0x20>)
 8001a82:	6013      	str	r3, [r2, #0]
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	20000044 	.word	0x20000044
 8001a90:	200000fc 	.word	0x200000fc

08001a94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return uwTick;
 8001a98:	4b02      	ldr	r3, [pc, #8]	; (8001aa4 <HAL_GetTick+0x10>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	200000fc 	.word	0x200000fc

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db0b      	blt.n	8001b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4906      	ldr	r1, [pc, #24]	; (8001b40 <__NVIC_EnableIRQ+0x34>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	; (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
         );
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c0c:	d301      	bcc.n	8001c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00f      	b.n	8001c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <SysTick_Config+0x40>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f7ff ff90 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <SysTick_Config+0x40>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2a:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <SysTick_Config+0x40>)
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	e000e010 	.word	0xe000e010

08001c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff2d 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c68:	f7ff ff42 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	f7ff ff90 	bl	8001b98 <NVIC_EncodePriority>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff5f 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff35 	bl	8001b0c <__NVIC_EnableIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffa2 	bl	8001bfc <SysTick_Config>
 8001cb8:	4603      	mov	r3, r0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b08b      	sub	sp, #44	; 0x2c
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd6:	e161      	b.n	8001f9c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	f040 8150 	bne.w	8001f96 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a97      	ldr	r2, [pc, #604]	; (8001f58 <HAL_GPIO_Init+0x294>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d05e      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d00:	4a95      	ldr	r2, [pc, #596]	; (8001f58 <HAL_GPIO_Init+0x294>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d875      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d06:	4a95      	ldr	r2, [pc, #596]	; (8001f5c <HAL_GPIO_Init+0x298>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d058      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d0c:	4a93      	ldr	r2, [pc, #588]	; (8001f5c <HAL_GPIO_Init+0x298>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d86f      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d12:	4a93      	ldr	r2, [pc, #588]	; (8001f60 <HAL_GPIO_Init+0x29c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d052      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d18:	4a91      	ldr	r2, [pc, #580]	; (8001f60 <HAL_GPIO_Init+0x29c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d869      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d1e:	4a91      	ldr	r2, [pc, #580]	; (8001f64 <HAL_GPIO_Init+0x2a0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d04c      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d24:	4a8f      	ldr	r2, [pc, #572]	; (8001f64 <HAL_GPIO_Init+0x2a0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d863      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d2a:	4a8f      	ldr	r2, [pc, #572]	; (8001f68 <HAL_GPIO_Init+0x2a4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d046      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
 8001d30:	4a8d      	ldr	r2, [pc, #564]	; (8001f68 <HAL_GPIO_Init+0x2a4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d85d      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d36:	2b12      	cmp	r3, #18
 8001d38:	d82a      	bhi.n	8001d90 <HAL_GPIO_Init+0xcc>
 8001d3a:	2b12      	cmp	r3, #18
 8001d3c:	d859      	bhi.n	8001df2 <HAL_GPIO_Init+0x12e>
 8001d3e:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <HAL_GPIO_Init+0x80>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001dbf 	.word	0x08001dbf
 8001d48:	08001d99 	.word	0x08001d99
 8001d4c:	08001dab 	.word	0x08001dab
 8001d50:	08001ded 	.word	0x08001ded
 8001d54:	08001df3 	.word	0x08001df3
 8001d58:	08001df3 	.word	0x08001df3
 8001d5c:	08001df3 	.word	0x08001df3
 8001d60:	08001df3 	.word	0x08001df3
 8001d64:	08001df3 	.word	0x08001df3
 8001d68:	08001df3 	.word	0x08001df3
 8001d6c:	08001df3 	.word	0x08001df3
 8001d70:	08001df3 	.word	0x08001df3
 8001d74:	08001df3 	.word	0x08001df3
 8001d78:	08001df3 	.word	0x08001df3
 8001d7c:	08001df3 	.word	0x08001df3
 8001d80:	08001df3 	.word	0x08001df3
 8001d84:	08001df3 	.word	0x08001df3
 8001d88:	08001da1 	.word	0x08001da1
 8001d8c:	08001db5 	.word	0x08001db5
 8001d90:	4a76      	ldr	r2, [pc, #472]	; (8001f6c <HAL_GPIO_Init+0x2a8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d96:	e02c      	b.n	8001df2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	623b      	str	r3, [r7, #32]
          break;
 8001d9e:	e029      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	3304      	adds	r3, #4
 8001da6:	623b      	str	r3, [r7, #32]
          break;
 8001da8:	e024      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	3308      	adds	r3, #8
 8001db0:	623b      	str	r3, [r7, #32]
          break;
 8001db2:	e01f      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	330c      	adds	r3, #12
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e01a      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d102      	bne.n	8001dcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e013      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d105      	bne.n	8001de0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	611a      	str	r2, [r3, #16]
          break;
 8001dde:	e009      	b.n	8001df4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de0:	2308      	movs	r3, #8
 8001de2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	615a      	str	r2, [r3, #20]
          break;
 8001dea:	e003      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dec:	2300      	movs	r3, #0
 8001dee:	623b      	str	r3, [r7, #32]
          break;
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x130>
          break;
 8001df2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2bff      	cmp	r3, #255	; 0xff
 8001df8:	d801      	bhi.n	8001dfe <HAL_GPIO_Init+0x13a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	e001      	b.n	8001e02 <HAL_GPIO_Init+0x13e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3304      	adds	r3, #4
 8001e02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2bff      	cmp	r3, #255	; 0xff
 8001e08:	d802      	bhi.n	8001e10 <HAL_GPIO_Init+0x14c>
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	e002      	b.n	8001e16 <HAL_GPIO_Init+0x152>
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3b08      	subs	r3, #8
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	210f      	movs	r1, #15
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	6a39      	ldr	r1, [r7, #32]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	431a      	orrs	r2, r3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 80a9 	beq.w	8001f96 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e44:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <HAL_GPIO_Init+0x2ac>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a49      	ldr	r2, [pc, #292]	; (8001f70 <HAL_GPIO_Init+0x2ac>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <HAL_GPIO_Init+0x2ac>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e5c:	4a45      	ldr	r2, [pc, #276]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	220f      	movs	r2, #15
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3d      	ldr	r2, [pc, #244]	; (8001f78 <HAL_GPIO_Init+0x2b4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00d      	beq.n	8001ea4 <HAL_GPIO_Init+0x1e0>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3c      	ldr	r2, [pc, #240]	; (8001f7c <HAL_GPIO_Init+0x2b8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d007      	beq.n	8001ea0 <HAL_GPIO_Init+0x1dc>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3b      	ldr	r2, [pc, #236]	; (8001f80 <HAL_GPIO_Init+0x2bc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d101      	bne.n	8001e9c <HAL_GPIO_Init+0x1d8>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e004      	b.n	8001ea6 <HAL_GPIO_Init+0x1e2>
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e002      	b.n	8001ea6 <HAL_GPIO_Init+0x1e2>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_GPIO_Init+0x1e2>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	f002 0203 	and.w	r2, r2, #3
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	4093      	lsls	r3, r2
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eb6:	492f      	ldr	r1, [pc, #188]	; (8001f74 <HAL_GPIO_Init+0x2b0>)
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	492b      	ldr	r1, [pc, #172]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4927      	ldr	r1, [pc, #156]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef8:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4921      	ldr	r1, [pc, #132]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f06:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	491d      	ldr	r1, [pc, #116]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	4917      	ldr	r1, [pc, #92]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4913      	ldr	r1, [pc, #76]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01f      	beq.n	8001f88 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	490d      	ldr	r1, [pc, #52]	; (8001f84 <HAL_GPIO_Init+0x2c0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60cb      	str	r3, [r1, #12]
 8001f54:	e01f      	b.n	8001f96 <HAL_GPIO_Init+0x2d2>
 8001f56:	bf00      	nop
 8001f58:	10320000 	.word	0x10320000
 8001f5c:	10310000 	.word	0x10310000
 8001f60:	10220000 	.word	0x10220000
 8001f64:	10210000 	.word	0x10210000
 8001f68:	10120000 	.word	0x10120000
 8001f6c:	10110000 	.word	0x10110000
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40010800 	.word	0x40010800
 8001f7c:	40010c00 	.word	0x40010c00
 8001f80:	40011000 	.word	0x40011000
 8001f84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_GPIO_Init+0x2f4>)
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4909      	ldr	r1, [pc, #36]	; (8001fb8 <HAL_GPIO_Init+0x2f4>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	3301      	adds	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f47f ae96 	bne.w	8001cd8 <HAL_GPIO_Init+0x14>
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	372c      	adds	r7, #44	; 0x2c
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	40010400 	.word	0x40010400

08001fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e001      	b.n	8001fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	807b      	strh	r3, [r7, #2]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffa:	787b      	ldrb	r3, [r7, #1]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002000:	887a      	ldrh	r2, [r7, #2]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002006:	e003      	b.n	8002010 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	041a      	lsls	r2, r3, #16
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	611a      	str	r2, [r3, #16]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800201a:	b480      	push	{r7}
 800201c:	b085      	sub	sp, #20
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800202c:	887a      	ldrh	r2, [r7, #2]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4013      	ands	r3, r2
 8002032:	041a      	lsls	r2, r3, #16
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	43d9      	mvns	r1, r3
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	400b      	ands	r3, r1
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	611a      	str	r2, [r3, #16]
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e272      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8087 	beq.w	800217a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800206c:	4b92      	ldr	r3, [pc, #584]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b04      	cmp	r3, #4
 8002076:	d00c      	beq.n	8002092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002078:	4b8f      	ldr	r3, [pc, #572]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d112      	bne.n	80020aa <HAL_RCC_OscConfig+0x5e>
 8002084:	4b8c      	ldr	r3, [pc, #560]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002090:	d10b      	bne.n	80020aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002092:	4b89      	ldr	r3, [pc, #548]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d06c      	beq.n	8002178 <HAL_RCC_OscConfig+0x12c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d168      	bne.n	8002178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e24c      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x76>
 80020b4:	4b80      	ldr	r3, [pc, #512]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a7f      	ldr	r2, [pc, #508]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	e02e      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x98>
 80020ca:	4b7b      	ldr	r3, [pc, #492]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a7a      	ldr	r2, [pc, #488]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b78      	ldr	r3, [pc, #480]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a77      	ldr	r2, [pc, #476]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e01d      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0xbc>
 80020ee:	4b72      	ldr	r3, [pc, #456]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a71      	ldr	r2, [pc, #452]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a6e      	ldr	r2, [pc, #440]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0xd4>
 8002108:	4b6b      	ldr	r3, [pc, #428]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a6a      	ldr	r2, [pc, #424]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a67      	ldr	r2, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff fcb4 	bl	8001a94 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7ff fcb0 	bl	8001a94 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e200      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b5d      	ldr	r3, [pc, #372]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0xe4>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff fca0 	bl	8001a94 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff fc9c 	bl	8001a94 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e1ec      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x10c>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d063      	beq.n	800224e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002186:	4b4c      	ldr	r3, [pc, #304]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b08      	cmp	r3, #8
 800219c:	d11c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x18c>
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d116      	bne.n	80021d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	4b43      	ldr	r3, [pc, #268]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x176>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e1c0      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c2:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4939      	ldr	r1, [pc, #228]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	e03a      	b.n	800224e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7ff fc55 	bl	8001a94 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ee:	f7ff fc51 	bl	8001a94 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1a1      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	4b2d      	ldr	r3, [pc, #180]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4927      	ldr	r1, [pc, #156]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
 8002220:	e015      	b.n	800224e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x270>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7ff fc34 	bl	8001a94 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7ff fc30 	bl	8001a94 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e180      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d03a      	beq.n	80022d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d019      	beq.n	8002296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7ff fc14 	bl	8001a94 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002270:	f7ff fc10 	bl	8001a94 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e160      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800228e:	2001      	movs	r0, #1
 8002290:	f000 faa6 	bl	80027e0 <RCC_Delay>
 8002294:	e01c      	b.n	80022d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_OscConfig+0x274>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7ff fbfa 	bl	8001a94 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a2:	e00f      	b.n	80022c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a4:	f7ff fbf6 	bl	8001a94 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d908      	bls.n	80022c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e146      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000
 80022bc:	42420000 	.word	0x42420000
 80022c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	4b92      	ldr	r3, [pc, #584]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1e9      	bne.n	80022a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80a6 	beq.w	800242a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e2:	4b8b      	ldr	r3, [pc, #556]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10d      	bne.n	800230a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	4b88      	ldr	r3, [pc, #544]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	4a87      	ldr	r2, [pc, #540]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f8:	61d3      	str	r3, [r2, #28]
 80022fa:	4b85      	ldr	r3, [pc, #532]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002306:	2301      	movs	r3, #1
 8002308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	4b82      	ldr	r3, [pc, #520]	; (8002514 <HAL_RCC_OscConfig+0x4c8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d118      	bne.n	8002348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002316:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <HAL_RCC_OscConfig+0x4c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7e      	ldr	r2, [pc, #504]	; (8002514 <HAL_RCC_OscConfig+0x4c8>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002322:	f7ff fbb7 	bl	8001a94 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232a:	f7ff fbb3 	bl	8001a94 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	; 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e103      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	4b75      	ldr	r3, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x4c8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d106      	bne.n	800235e <HAL_RCC_OscConfig+0x312>
 8002350:	4b6f      	ldr	r3, [pc, #444]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a6e      	ldr	r2, [pc, #440]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e02d      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x334>
 8002366:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a69      	ldr	r2, [pc, #420]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a66      	ldr	r2, [pc, #408]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	6213      	str	r3, [r2, #32]
 800237e:	e01c      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d10c      	bne.n	80023a2 <HAL_RCC_OscConfig+0x356>
 8002388:	4b61      	ldr	r3, [pc, #388]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4a60      	ldr	r2, [pc, #384]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6213      	str	r3, [r2, #32]
 8002394:	4b5e      	ldr	r3, [pc, #376]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4a5d      	ldr	r2, [pc, #372]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	e00b      	b.n	80023ba <HAL_RCC_OscConfig+0x36e>
 80023a2:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a5a      	ldr	r2, [pc, #360]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	4b58      	ldr	r3, [pc, #352]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a57      	ldr	r2, [pc, #348]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d015      	beq.n	80023ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c2:	f7ff fb67 	bl	8001a94 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7ff fb63 	bl	8001a94 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0b1      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ee      	beq.n	80023ca <HAL_RCC_OscConfig+0x37e>
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ee:	f7ff fb51 	bl	8001a94 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7ff fb4d 	bl	8001a94 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e09b      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ee      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d105      	bne.n	800242a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b3c      	ldr	r3, [pc, #240]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a3b      	ldr	r2, [pc, #236]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8087 	beq.w	8002542 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b08      	cmp	r3, #8
 800243e:	d061      	beq.n	8002504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d146      	bne.n	80024d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002448:	4b33      	ldr	r3, [pc, #204]	; (8002518 <HAL_RCC_OscConfig+0x4cc>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7ff fb21 	bl	8001a94 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002456:	f7ff fb1d 	bl	8001a94 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e06d      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002468:	4b29      	ldr	r3, [pc, #164]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d108      	bne.n	8002490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4921      	ldr	r1, [pc, #132]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002490:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a19      	ldr	r1, [r3, #32]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	430b      	orrs	r3, r1
 80024a2:	491b      	ldr	r1, [pc, #108]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_RCC_OscConfig+0x4cc>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7ff faf1 	bl	8001a94 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b6:	f7ff faed 	bl	8001a94 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e03d      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x46a>
 80024d4:	e035      	b.n	8002542 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_RCC_OscConfig+0x4cc>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff fada 	bl	8001a94 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7ff fad6 	bl	8001a94 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e026      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x498>
 8002502:	e01e      	b.n	8002542 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e019      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
 8002510:	40021000 	.word	0x40021000
 8002514:	40007000 	.word	0x40007000
 8002518:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_OscConfig+0x500>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	429a      	cmp	r2, r3
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0d0      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002564:	4b6a      	ldr	r3, [pc, #424]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d910      	bls.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0207 	bic.w	r2, r3, #7
 800257a:	4965      	ldr	r1, [pc, #404]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0b8      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a58      	ldr	r2, [pc, #352]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c4:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	494d      	ldr	r1, [pc, #308]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d040      	beq.n	8002670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d115      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e07f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e073      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06b      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f023 0203 	bic.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4936      	ldr	r1, [pc, #216]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002640:	f7ff fa28 	bl	8001a94 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	e00a      	b.n	800265e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7ff fa24 	bl	8001a94 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e053      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 020c 	and.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1eb      	bne.n	8002648 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d210      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4922      	ldr	r1, [pc, #136]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e032      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4916      	ldr	r1, [pc, #88]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	490e      	ldr	r1, [pc, #56]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026de:	f000 f821 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	490a      	ldr	r1, [pc, #40]	; (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	5ccb      	ldrb	r3, [r1, r3]
 80026f2:	fa22 f303 	lsr.w	r3, r2, r3
 80026f6:	4a09      	ldr	r2, [pc, #36]	; (800271c <HAL_RCC_ClockConfig+0x1cc>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1d0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f986 	bl	8001a10 <HAL_InitTick>

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40022000 	.word	0x40022000
 8002714:	40021000 	.word	0x40021000
 8002718:	08003064 	.word	0x08003064
 800271c:	2000003c 	.word	0x2000003c
 8002720:	20000040 	.word	0x20000040

08002724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	b490      	push	{r4, r7}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800272a:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800272c:	1d3c      	adds	r4, r7, #4
 800272e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002734:	f240 2301 	movw	r3, #513	; 0x201
 8002738:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d002      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x40>
 800275e:	2b08      	cmp	r3, #8
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x46>
 8002762:	e02b      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002764:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002766:	623b      	str	r3, [r7, #32]
      break;
 8002768:	e02b      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	0c9b      	lsrs	r3, r3, #18
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3328      	adds	r3, #40	; 0x28
 8002774:	443b      	add	r3, r7
 8002776:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800277a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0c5b      	lsrs	r3, r3, #17
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	3328      	adds	r3, #40	; 0x28
 8002792:	443b      	add	r3, r7
 8002794:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002798:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800279e:	fb03 f202 	mul.w	r2, r3, r2
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	e004      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	623b      	str	r3, [r7, #32]
      break;
 80027ba:	e002      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027be:	623b      	str	r3, [r7, #32]
      break;
 80027c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3728      	adds	r7, #40	; 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc90      	pop	{r4, r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	08003054 	.word	0x08003054
 80027d4:	40021000 	.word	0x40021000
 80027d8:	007a1200 	.word	0x007a1200
 80027dc:	003d0900 	.word	0x003d0900

080027e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <RCC_Delay+0x34>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <RCC_Delay+0x38>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	0a5b      	lsrs	r3, r3, #9
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027fc:	bf00      	nop
  }
  while (Delay --);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1e5a      	subs	r2, r3, #1
 8002802:	60fa      	str	r2, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f9      	bne.n	80027fc <RCC_Delay+0x1c>
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	2000003c 	.word	0x2000003c
 8002818:	10624dd3 	.word	0x10624dd3

0800281c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e041      	b.n	80028b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff f84c 	bl	80018e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f000 fa6a 	bl	8002d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d001      	beq.n	80028d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e035      	b.n	8002940 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0201 	orr.w	r2, r2, #1
 80028ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a16      	ldr	r2, [pc, #88]	; (800294c <HAL_TIM_Base_Start_IT+0x90>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_TIM_Base_Start_IT+0x4e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fe:	d004      	beq.n	800290a <HAL_TIM_Base_Start_IT+0x4e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_TIM_Base_Start_IT+0x94>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d111      	bne.n	800292e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b06      	cmp	r3, #6
 800291a:	d010      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292c:	e007      	b.n	800293e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40012c00 	.word	0x40012c00
 8002950:	40000400 	.word	0x40000400

08002954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b02      	cmp	r3, #2
 8002968:	d122      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b02      	cmp	r3, #2
 8002976:	d11b      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0202 	mvn.w	r2, #2
 8002980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9b1 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f9a4 	bl	8002cec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f9b3 	bl	8002d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0204 	mvn.w	r2, #4
 80029d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f987 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f97a 	bl	8002cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f989 	bl	8002d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0208 	mvn.w	r2, #8
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f95d 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f950 	bl	8002cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f95f 	bl	8002d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d122      	bne.n	8002aac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d11b      	bne.n	8002aac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0210 	mvn.w	r2, #16
 8002a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2208      	movs	r2, #8
 8002a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f933 	bl	8002cfe <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f926 	bl	8002cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f935 	bl	8002d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d107      	bne.n	8002ad8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0201 	mvn.w	r2, #1
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fe fec8 	bl	8001868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	2b80      	cmp	r3, #128	; 0x80
 8002ae4:	d10e      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d107      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa67 	bl	8002fd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b40      	cmp	r3, #64	; 0x40
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d107      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8f9 	bl	8002d22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d10e      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d107      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0220 	mvn.w	r2, #32
 8002b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa32 	bl	8002fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_TIM_ConfigClockSource+0x18>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0b3      	b.n	8002ce4 <HAL_TIM_ConfigClockSource+0x180>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb4:	d03e      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0xd0>
 8002bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bba:	f200 8087 	bhi.w	8002ccc <HAL_TIM_ConfigClockSource+0x168>
 8002bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc2:	f000 8085 	beq.w	8002cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bca:	d87f      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x168>
 8002bcc:	2b70      	cmp	r3, #112	; 0x70
 8002bce:	d01a      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0xa2>
 8002bd0:	2b70      	cmp	r3, #112	; 0x70
 8002bd2:	d87b      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x168>
 8002bd4:	2b60      	cmp	r3, #96	; 0x60
 8002bd6:	d050      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x116>
 8002bd8:	2b60      	cmp	r3, #96	; 0x60
 8002bda:	d877      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x168>
 8002bdc:	2b50      	cmp	r3, #80	; 0x50
 8002bde:	d03c      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0xf6>
 8002be0:	2b50      	cmp	r3, #80	; 0x50
 8002be2:	d873      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x168>
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d058      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x136>
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d86f      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x168>
 8002bec:	2b30      	cmp	r3, #48	; 0x30
 8002bee:	d064      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x156>
 8002bf0:	2b30      	cmp	r3, #48	; 0x30
 8002bf2:	d86b      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x168>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d060      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x156>
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d867      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x168>
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d05c      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x156>
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d05a      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c04:	e062      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6899      	ldr	r1, [r3, #8]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f000 f95c 	bl	8002ed2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	609a      	str	r2, [r3, #8]
      break;
 8002c32:	e04e      	b.n	8002cd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6899      	ldr	r1, [r3, #8]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f000 f945 	bl	8002ed2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c56:	609a      	str	r2, [r3, #8]
      break;
 8002c58:	e03b      	b.n	8002cd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f000 f8bc 	bl	8002de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2150      	movs	r1, #80	; 0x50
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f913 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002c78:	e02b      	b.n	8002cd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f000 f8da 	bl	8002e40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2160      	movs	r1, #96	; 0x60
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f903 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002c98:	e01b      	b.n	8002cd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f000 f89c 	bl	8002de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2140      	movs	r1, #64	; 0x40
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f8f3 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002cb8:	e00b      	b.n	8002cd2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f000 f8ea 	bl	8002e9e <TIM_ITRx_SetConfig>
        break;
 8002cca:	e002      	b.n	8002cd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ccc:	bf00      	nop
 8002cce:	e000      	b.n	8002cd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <TIM_Base_SetConfig+0xa8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <TIM_Base_SetConfig+0x28>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d52:	d003      	beq.n	8002d5c <TIM_Base_SetConfig+0x28>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <TIM_Base_SetConfig+0xac>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d108      	bne.n	8002d6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1a      	ldr	r2, [pc, #104]	; (8002ddc <TIM_Base_SetConfig+0xa8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0x52>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7c:	d003      	beq.n	8002d86 <TIM_Base_SetConfig+0x52>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <TIM_Base_SetConfig+0xac>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <TIM_Base_SetConfig+0xa8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40000400 	.word	0x40000400

08002de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f023 0201 	bic.w	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f023 030a 	bic.w	r3, r3, #10
 8002e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	bf00      	nop
 8002e38:	371c      	adds	r7, #28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f023 0210 	bic.w	r2, r3, #16
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	031b      	lsls	r3, r3, #12
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	621a      	str	r2, [r3, #32]
}
 8002e94:	bf00      	nop
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f043 0307 	orr.w	r3, r3, #7
 8002ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b087      	sub	sp, #28
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	021a      	lsls	r2, r3, #8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	609a      	str	r2, [r3, #8]
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e041      	b.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f74:	d004      	beq.n	8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a10      	ldr	r2, [pc, #64]	; (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d10c      	bne.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400

08002fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <memset>:
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4402      	add	r2, r0
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d100      	bne.n	8002fee <memset+0xa>
 8002fec:	4770      	bx	lr
 8002fee:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff2:	e7f9      	b.n	8002fe8 <memset+0x4>

08002ff4 <__libc_init_array>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	2600      	movs	r6, #0
 8002ff8:	4d0c      	ldr	r5, [pc, #48]	; (800302c <__libc_init_array+0x38>)
 8002ffa:	4c0d      	ldr	r4, [pc, #52]	; (8003030 <__libc_init_array+0x3c>)
 8002ffc:	1b64      	subs	r4, r4, r5
 8002ffe:	10a4      	asrs	r4, r4, #2
 8003000:	42a6      	cmp	r6, r4
 8003002:	d109      	bne.n	8003018 <__libc_init_array+0x24>
 8003004:	f000 f81a 	bl	800303c <_init>
 8003008:	2600      	movs	r6, #0
 800300a:	4d0a      	ldr	r5, [pc, #40]	; (8003034 <__libc_init_array+0x40>)
 800300c:	4c0a      	ldr	r4, [pc, #40]	; (8003038 <__libc_init_array+0x44>)
 800300e:	1b64      	subs	r4, r4, r5
 8003010:	10a4      	asrs	r4, r4, #2
 8003012:	42a6      	cmp	r6, r4
 8003014:	d105      	bne.n	8003022 <__libc_init_array+0x2e>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	f855 3b04 	ldr.w	r3, [r5], #4
 800301c:	4798      	blx	r3
 800301e:	3601      	adds	r6, #1
 8003020:	e7ee      	b.n	8003000 <__libc_init_array+0xc>
 8003022:	f855 3b04 	ldr.w	r3, [r5], #4
 8003026:	4798      	blx	r3
 8003028:	3601      	adds	r6, #1
 800302a:	e7f2      	b.n	8003012 <__libc_init_array+0x1e>
 800302c:	08003074 	.word	0x08003074
 8003030:	08003074 	.word	0x08003074
 8003034:	08003074 	.word	0x08003074
 8003038:	08003078 	.word	0x08003078

0800303c <_init>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr

08003048 <_fini>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	bf00      	nop
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr
